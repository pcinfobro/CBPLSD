<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeByPass - Order Histories</title>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Font Awesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Custom CSS -->
     <style>
        /* Color System */
:root {
  /* Color System */
  --primary: #2563eb;
  --primary-light: #3b82f6;
  --primary-dark: #1d4ed8;
  --primary-transparent: rgba(37, 99, 235, 0.1);
  --secondary: #0f172a;
  --accent: #10b981;
  --accent-dark: #059669;
  --purple: #8b5cf6;
  --pink: #ec4899;
  --orange: #f97316;
  --teal: #14b8a6;
  --white: #ffffff;
  --light: #f9fafb;
  --gray-50: #f9fafb;
  --gray-100: #f3f4f6;
  --gray-200: #e5e7eb;
  --gray-300: #d1d5db;
  --gray-400: #9ca3af;
  --gray-500: #6b7280;
  --gray-600: #4b5563;
  --gray-700: #374151;
  --gray-800: #1f2937;
  --gray-900: #111827;
  --danger: #ef4444;
  --warning: #f59e0b;
  --success: #10b981;
  --info: #3b82f6;

  /* Layout */
  --sidebar-width: 260px;
  --sidebar-collapsed-width: 70px;
  --header-height: 64px;

  /* Border Radius */
  --border-radius-sm: 4px;
  --border-radius: 6px;
  --border-radius-md: 8px;
  --border-radius-lg: 12px;
  --border-radius-xl: 16px;

  /* Shadows */
  --shadow-xs: 0 1px 2px rgba(16, 24, 40, 0.05);
  --shadow-sm: 0 1px 3px rgba(16, 24, 40, 0.1), 0 1px 2px rgba(16, 24, 40, 0.06);
  --shadow: 0 4px 6px -1px rgba(16, 24, 40, 0.1), 0 2px 4px -2px rgba(16, 24, 40, 0.1);
  --shadow-md: 0 10px 15px -3px rgba(16, 24, 40, 0.1), 0 4px 6px -4px rgba(16, 24, 40, 0.1);
  --shadow-lg: 0 20px 25px -5px rgba(16, 24, 40, 0.1), 0 8px 10px -6px rgba(16, 24, 40, 0.1);
  --shadow-xl: 0 25px 50px -12px rgba(16, 24, 40, 0.25);

  /* Transitions */
  --transition-fast: all 0.2s ease;
  --transition: all 0.3s ease;
  --transition-slow: all 0.5s ease;
}

/* Base Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  scroll-behavior: smooth;
  -webkit-text-size-adjust: 100%;
}

body {
  font-family: "Inter", sans-serif;
  background-color: var(--gray-50);
  color: var(--gray-800);
  line-height: 1.6;
  overflow-x: hidden;
  min-height: 100vh;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  width: 100%;
}

a {
  text-decoration: none;
  color: inherit;
  transition: var(--transition);
}

ul {
  list-style: none;
}

button {
  cursor: pointer;
  font-family: inherit;
  border: none;
  background: none;
}

/* Typography */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 600;
  line-height: 1.2;
  color: var(--secondary);
  margin-bottom: 0.5rem;
}

h1 {
  font-size: 1.75rem;
}
h2 {
  font-size: 1.5rem;
}
h3 {
  font-size: 1.25rem;
}
h4 {
  font-size: 1.125rem;
}
h5 {
  font-size: 1rem;
}
h6 {
  font-size: 0.875rem;
}

p {
  margin-bottom: 1rem;
  color: var(--gray-600);
}

/* Layout */
.dashboard-container {
  display: flex;
  min-height: 100vh;
  position: relative;
  width: 100%;
}

/* Sidebar */
.sidebar {
  width: var(--sidebar-width);
  background: linear-gradient(180deg, var(--secondary) 0%, #1e3a8a 100%);
  color: var(--white);
  height: 100vh;
  position: fixed;
  left: 0;
  top: 0;
  z-index: 100;
  transition: var(--transition);
  overflow-y: auto;
  overflow-x: hidden;
  box-shadow: var(--shadow-lg);
  display: flex;
  flex-direction: column;
}

.sidebar::-webkit-scrollbar {
  width: 4px;
}

.sidebar::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
}

.sidebar::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 10px;
}

.sidebar-header {
  padding: 1rem 1.25rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  height: var(--header-height);
}

/* Update logo styles for better visibility control */
.logo {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-weight: 700;
  font-size: 1.25rem;
  color: var(--white);
  width: 100%;
}

.logo-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 36px;
  background-color: transparent;
  border-radius: var(--border-radius);
  transition: var(--transition);
  flex-shrink: 0;
}

.logo-icon img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.logo-text {
  transition: var(--transition);
  white-space: nowrap;
  overflow: hidden;
  max-width: 180px; /* Limit the width to prevent overflow */
}

.logo-text img {
  height: 24px;
  width: auto;
  transition: var(--transition);
}

/* Add a logo container class for better control */
.logo-container {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

/* Adjust logo visibility based on sidebar state */
.sidebar-collapsed .logo-text {
  opacity: 0;
  visibility: hidden;
  width: 0;
  overflow: hidden;
}

.sidebar-collapsed .logo-icon {
  margin: 0 auto;
  opacity: 1;
  visibility: visible;
  display: flex;
}

/* Hide icon when sidebar is expanded */
.sidebar:not(.sidebar-collapsed) .logo-icon {
  display: none;
}

/* Update the sidebar toggle container positioning to be at the border between sidebar and main content */
.sidebar-toggle-container {
  position: absolute;
  top: 20px;
  left: var(--sidebar-width);
  transform: translateX(-50%);
  z-index: 101;
}

.sidebar-collapsed + .sidebar-toggle-container {
  left: var(--sidebar-collapsed-width);
}

/* Improved sidebar toggle button design */
.sidebar-toggle {
  width: 32px;
  height: 32px;
  background: var(--white);
  border: none;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary);
  box-shadow: var(--shadow-md);
  transition: var(--transition);
  position: relative;
  overflow: hidden;
}

.sidebar-toggle:hover {
  background: var(--primary-light);
  color: var(--white);
  transform: scale(1.1);
}

.sidebar-toggle::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
  border-radius: 50%;
}

.sidebar-toggle i {
  font-size: 1rem;
  transition: var(--transition);
}

.sidebar-toggle .toggle-icon-open {
  display: block;
}

.sidebar-toggle .toggle-icon-close {
  display: none;
}

.sidebar-collapsed .sidebar-toggle .toggle-icon-open {
  display: none;
}

.sidebar-collapsed .sidebar-toggle .toggle-icon-close {
  display: block;
}

.sidebar-menu {
  padding: 1.25rem 0;
  flex: 1;
  overflow-y: auto;
}

.sidebar-menu::-webkit-scrollbar {
  width: 3px;
}

.sidebar-menu::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
}

.sidebar-menu::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 10px;
}

.menu-category {
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 1px;
  color: var(--gray-400);
  padding: 0 1.5rem;
  margin: 1.5rem 0 0.75rem;
  transition: var(--transition);
}

.menu-item {
  position: relative;
}

.menu-link {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.625rem 1.5rem;
  color: var(--gray-300);
  font-weight: 500;
  transition: var(--transition);
  position: relative;
  border-left: 3px solid transparent;
}

.menu-link:hover,
.menu-link.active {
  color: var(--white);
  background: rgba(255, 255, 255, 0.1);
  border-left-color: var(--primary-light);
}

.menu-icon {
  font-size: 1.125rem;
  min-width: 1.125rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.menu-text {
  transition: var(--transition);
  white-space: nowrap;
}

.menu-badge {
  margin-left: auto;
  background: var(--primary-light);
  color: var(--white);
  font-size: 0.75rem;
  font-weight: 600;
  padding: 0.125rem 0.5rem;
  border-radius: 50px;
  transition: var(--transition);
}

/* Collapsed Sidebar */
.sidebar-collapsed {
  width: var(--sidebar-collapsed-width);
}

.sidebar-collapsed .logo-text,
.sidebar-collapsed .menu-text,
.sidebar-collapsed .menu-badge,
.sidebar-collapsed .menu-category {
  opacity: 0;
  visibility: hidden;
  width: 0;
}

.sidebar-collapsed .menu-link {
  justify-content: center;
  padding: 0.625rem;
}

.sidebar-collapsed .menu-icon {
  margin-right: 0;
}

/* Fix for deposit wallet icon alignment when sidebar is collapsed */
.sidebar-collapsed .menu-item .menu-link {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}

.sidebar-collapsed .menu-item .menu-icon {
  position: relative;
  margin: 0;
}

/* Main Content */
.main-content {
  flex: 1;
  margin-left: var(--sidebar-width);
  transition: var(--transition);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  width: calc(100% - var(--sidebar-width));
}

.sidebar-collapsed + .main-content {
  margin-left: var(--sidebar-collapsed-width);
  width: calc(100% - var(--sidebar-collapsed-width));
}

/* Header */
.header {
  height: var(--header-height);
  background: var(--white);
  box-shadow: var(--shadow-sm);
  padding: 0 1.5rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 99;
}

.header-left {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.mobile-toggle {
  display: none;
  background: none;
  border: none;
  color: var(--gray-700);
  font-size: 1.25rem;
  cursor: pointer;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
}

.mobile-toggle:hover {
  background: var(--gray-100);
}

.header-right {
  display: flex;
  align-items: center;
  gap: 1.25rem;
}

.balance-display {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: var(--primary-transparent);
  padding: 0.5rem 0.75rem;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: var(--transition);
}

.balance-display:hover {
  background: rgba(37, 99, 235, 0.15);
}

.balance-icon {
  color: var(--primary);
  font-size: 1rem;
}

.balance-amount {
  font-weight: 600;
  color: var(--primary);
}

.add-funds-btn {
  background: var(--primary);
  color: var(--white);
  border: none;
  border-radius: var(--border-radius);
  padding: 0.5rem 0.75rem;
  font-size: 0.875rem;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 0.375rem;
  transition: var(--transition);
}

.add-funds-btn:hover {
  background: var(--primary-dark);
  transform: translateY(-1px);
}

.user-dropdown {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: var(--border-radius);
  transition: var(--transition);
  position: relative;
}

.user-dropdown:hover {
  background: var(--gray-100);
}

.header-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: var(--primary-transparent);
  color: var(--primary);
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 1rem;
}

.header-user-info {
  display: none;
}

.header-user-name {
  font-weight: 600;
  color: var(--secondary);
  font-size: 0.875rem;
}

.header-user-role {
  font-size: 0.75rem;
  color: var(--gray-500);
}

/* Content Area */
.content {
  padding: 1.5rem;
  flex: 1;
}

.section-header {
  margin-bottom: 1.5rem;
}

.section-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--secondary);
  margin-bottom: 0.375rem;
}

.section-subtitle {
  color: var(--gray-500);
  font-size: 0.9375rem;
}

/* Stats Cards */
.stats-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
  gap: 1.25rem;
  margin-bottom: 1.5rem;
}

.stat-card {
  background: var(--white);
  border-radius: var(--border-radius-md);
  padding: 1.25rem;
  box-shadow: var(--shadow-sm);
  transition: var(--transition);
  border: 1px solid var(--gray-100);
  display: flex;
  align-items: center;
  gap: 1rem;
  position: relative;
  overflow: hidden;
}

.stat-card::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 3px;
  background: linear-gradient(90deg, transparent, var(--primary-light), transparent);
  opacity: 0;
  transition: var(--transition);
}

.stat-card:hover {
  transform: translateY(-3px);
  box-shadow: var(--shadow-md);
  border-color: var(--primary-light);
}

.stat-card:hover::after {
  opacity: 1;
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: var(--border-radius);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.25rem;
  flex-shrink: 0;
}

.stat-icon-primary {
  background: var(--primary-transparent);
  color: var(--primary);
}

.stat-icon-success {
  background: rgba(16, 185, 129, 0.1);
  color: var(--success);
}

.stat-icon-info {
  background: rgba(59, 130, 246, 0.1);
  color: var(--info);
}

.stat-icon-warning {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning);
}

.stat-content {
  flex: 1;
  min-width: 0;
}

.stat-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--secondary);
  margin-bottom: 0.25rem;
}

.stat-label {
  color: var(--gray-500);
  font-size: 0.875rem;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Cards */
.card-grid {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 1.25rem;
  margin-bottom: 1.5rem;
}

.card {
  background: var(--white);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
  transition: var(--transition);
  border: 1px solid var(--gray-100);
}

.card:hover {
  box-shadow: var(--shadow-md);
  border-color: var(--primary-light);
}

.card-header {
  padding: 1.25rem;
  border-bottom: 1px solid var(--gray-100);
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: linear-gradient(to right, var(--white), var(--gray-50));
}

.card-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--secondary);
  margin: 0;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.card-title i {
  color: var(--primary);
  font-size: 0.9375rem;
}

.card-body {
  padding: 1.25rem;
}

/* News Cards */
.news-item {
  padding: 1rem;
  margin-bottom: 0.5rem;
  border-radius: var(--border-radius);
  transition: var(--transition);
}

.news-item:hover {
  background-color: var(--gray-50);
}

.news-item:last-child {
  margin-bottom: 0;
}

.news-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.news-title {
  font-weight: 600;
  color: var(--secondary);
  margin: 0;
  font-size: 0.9375rem;
}

.news-date {
  font-size: 0.75rem;
  color: var(--gray-500);
}

.news-content {
  color: var(--gray-600);
  margin-bottom: 0;
  word-break: break-word;
  font-size: 0.875rem;
}

/* Quick Actions */
.quick-actions {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 0.75rem;
}

.quick-action {
  background: var(--white);
  border: 1px solid var(--gray-100);
  border-radius: var(--border-radius);
  padding: 1rem 0.75rem;
  text-align: center;
  transition: var(--transition);
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.quick-action::before {
  content: "";
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: radial-gradient(circle, var(--primary-transparent) 0%, transparent 70%);
  opacity: 0;
  transition: var(--transition);
  z-index: 0;
}

.quick-action:hover {
  transform: translateY(-3px);
  box-shadow: var(--shadow-md);
  border-color: var(--primary-light);
}

.quick-action:hover::before {
  opacity: 1;
}

.quick-action-icon {
  font-size: 1.5rem;
  color: var(--primary);
  margin-bottom: 0.5rem;
  position: relative;
  z-index: 1;
}

.quick-action-label {
  font-weight: 500;
  color: var(--secondary);
  margin: 0;
  position: relative;
  z-index: 1;
  font-size: 0.875rem;
}

/* Forms */
.form-group {
  margin-bottom: 1.25rem;
}

.form-label {
  display: block;
  margin-bottom: 0.375rem;
  font-weight: 500;
  color: var(--secondary);
  font-size: 0.875rem;
}

.form-control {
  width: 100%;
  padding: 0.625rem 0.875rem;
  font-size: 0.875rem;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius);
  transition: var(--transition);
  background-color: var(--white);
}

.form-control:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px var(--primary-transparent);
}

.form-select {
  width: 100%;
  padding: 0.625rem 0.875rem;
  font-size: 0.875rem;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius);
  background-color: var(--white);
  transition: var(--transition);
  appearance: none;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%236B7280' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: right 0.75rem center;
  background-size: 1rem;
}

.form-select:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px var(--primary-transparent);
}

.input-group {
  display: flex;
  align-items: center;
}

.input-group .form-control {
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
  flex: 1;
}

.input-group-text {
  padding: 0.625rem 0.875rem;
  background: var(--gray-100);
  border: 1px solid var(--gray-300);
  border-left: none;
  border-top-right-radius: var(--border-radius);
  border-bottom-right-radius: var(--border-radius);
  color: var(--gray-600);
  font-size: 0.875rem;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.375rem;
  padding: 0.625rem 1.25rem;
  font-weight: 500;
  border-radius: var(--border-radius);
  transition: var(--transition);
  cursor: pointer;
  border: none;
  font-size: 0.875rem;
  touch-action: manipulation;
}

.btn-primary {
  background: var(--primary);
  color: var(--white);
}

.btn-primary:hover {
  background: var(--primary-dark);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
}

.btn-outline {
  background: transparent;
  color: var(--primary);
  border: 1px solid var(--primary);
}

.btn-outline:hover {
  background: var(--primary);
  color: var(--white);
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
}

.btn-sm {
  padding: 0.375rem 0.75rem;
  font-size: 0.8125rem;
}

/* Tables */
.table-container {
  overflow-x: auto;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  background: var(--white);
  margin-bottom: 1.5rem;
  -webkit-overflow-scrolling: touch;
  width: 100%;
}

.table {
  width: 100%;
  border-collapse: collapse;
  min-width: 600px;
}

.table th {
  background: var(--gray-50);
  padding: 0.75rem 1rem;
  text-align: left;
  font-weight: 600;
  color: var(--secondary);
  border-bottom: 1px solid var(--gray-200);
  position: sticky;
  top: 0;
  z-index: 10;
  font-size: 0.875rem;
}

.table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--gray-100);
  color: var(--gray-700);
  word-break: break-word;
  font-size: 0.875rem;
}

.table tr:last-child td {
  border-bottom: none;
}

.table tr:nth-child(even) {
  background: var(--gray-50);
}

.table-empty {
  text-align: center;
  padding: 2rem;
  color: var(--gray-500);
}

/* Responsive table for mobile */
@media (max-width: 767px) {
  .table-responsive-card {
    border: 0;
    box-shadow: none;
  }

  .table-responsive-card table,
  .table-responsive-card thead,
  .table-responsive-card tbody,
  .table-responsive-card th,
  .table-responsive-card td,
  .table-responsive-card tr {
    display: block;
  }

  .table-responsive-card thead tr {
    position: absolute;
    top: -9999px;
    left: -9999px;
  }

  .table-responsive-card tr {
    border: 1px solid var(--gray-200);
    border-radius: var(--border-radius);
    margin-bottom: 0.75rem;
    background: var(--white);
    box-shadow: var(--shadow-sm);
  }

  .table-responsive-card td {
    border: none;
    border-bottom: 1px solid var(--gray-100);
    position: relative;
    padding-left: 50%;
    text-align: right;
    min-height: 40px;
    display: flex;
    align-items: center;
    justify-content: flex-end;
  }

  .table-responsive-card td:last-child {
    border-bottom: 0;
  }

  .table-responsive-card td:before {
    position: absolute;
    top: 0.75rem;
    left: 1rem;
    width: 45%;
    padding-right: 10px;
    white-space: nowrap;
    text-align: left;
    font-weight: 600;
    content: attr(data-label);
  }
}

/* Search */
.search-container {
  margin-bottom: 1.25rem;
  position: relative;
}

.search-input {
  width: 100%;
  padding: 0.625rem 1rem 0.625rem 2.5rem;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius);
  background-color: var(--white);
  transition: var(--transition);
  font-size: 0.875rem;
}

.search-input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px var(--primary-transparent);
}

.search-icon {
  position: absolute;
  left: 0.875rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--gray-500);
  pointer-events: none;
}

/* Badges */
.badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem 0.625rem;
  font-size: 0.75rem;
  font-weight: 600;
  border-radius: 50px;
  text-transform: capitalize;
}

.badge-primary {
  background-color: var(--primary-transparent);
  color: var(--primary);
}

.badge-success {
  background-color: rgba(16, 185, 129, 0.1);
  color: var(--success);
}

.badge-warning {
  background-color: rgba(245, 158, 11, 0.1);
  color: var(--warning);
}

.badge-danger {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--danger);
}

/* API Key */
.api-key-container {
  background: var(--gray-50);
  border: 1px solid var(--gray-200);
  border-radius: var(--border-radius);
  padding: 0.875rem;
  margin-bottom: 1.25rem;
  font-family: monospace;
  position: relative;
  overflow-x: auto;
}

.api-key {
  overflow-x: auto;
  white-space: nowrap;
  color: var(--gray-800);
  padding-right: 5rem;
  font-size: 0.875rem;
}

.copy-btn {
  position: absolute;
  right: 0.875rem;
  top: 50%;
  transform: translateY(-50%);
  background: var(--gray-200);
  border: none;
  color: var(--gray-700);
  padding: 0.375rem 0.75rem;
  border-radius: var(--border-radius);
  font-size: 0.8125rem;
  transition: var(--transition);
}

.copy-btn:hover {
  background: var(--gray-300);
}

/* Row layout for forms */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: 0 -0.625rem;
}

.row .form-group {
  flex: 1;
  min-width: 200px;
  padding: 0 0.625rem;
}

/* User Dropdown Menu */
.dropdown-menu {
  position: absolute;
  top: calc(100% + 0.5rem);
  right: 0;
  background: var(--white);
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-lg);
  width: 220px;
  z-index: 1000;
  overflow: hidden;
  opacity: 0;
  visibility: hidden;
  transform: translateY(10px);
  transition: all 0.2s ease;
}

.dropdown-menu.active {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
}

.dropdown-header {
  padding: 1rem;
  border-bottom: 1px solid var(--gray-100);
}

.dropdown-user-info {
  display: flex;
  flex-direction: column;
}

.dropdown-user-name {
  font-weight: 600;
  color: var(--secondary);
  margin-bottom: 0.25rem;
  font-size: 0.9375rem;
}

.dropdown-user-email {
  font-size: 0.8125rem;
  color: var(--gray-500);
}

.dropdown-body {
  padding: 0.5rem 0;
}

.dropdown-item {
  padding: 0.625rem 1rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  color: var(--gray-700);
  transition: var(--transition);
  cursor: pointer;
  font-size: 0.875rem;
}

.dropdown-item:hover {
  background: var(--gray-50);
  color: var(--primary);
}

.dropdown-item i {
  font-size: 1rem;
  color: var(--gray-500);
}

.dropdown-item:hover i {
  color: var(--primary);
}

.dropdown-divider {
  height: 1px;
  background: var(--gray-100);
  margin: 0.5rem 0;
}

/* History Tabs */
.history-tabs {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
  border-bottom: 1px solid var(--gray-200);
  padding-bottom: 0.75rem;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.history-tab {
  background: var(--gray-50);
  border: 1px solid var(--gray-200);
  border-radius: var(--border-radius);
  padding: 0.5rem 1rem;
  text-align: center;
  transition: var(--transition);
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: var(--gray-600);
  white-space: nowrap;
}

.history-tab i {
  font-size: 1rem;
}

.history-tab:hover,
.history-tab.active {
  background: var(--primary-transparent);
  border-color: var(--primary);
  color: var(--primary);
}

/* History Filters */
.history-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-bottom: 1.5rem;
  align-items: center;
  justify-content: space-between;
}

.date-range-filter {
  display: flex;
  gap: 0.75rem;
  align-items: center;
}

.date-range-input {
  display: flex;
  flex-direction: column;
}

.date-range-input label {
  font-size: 0.75rem;
  color: var(--gray-500);
  margin-bottom: 0.25rem;
}

/* History Stats */
.history-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.history-stat {
  background: var(--white);
  border-radius: var(--border-radius-md);
  padding: 1rem;
  box-shadow: var(--shadow-sm);
  transition: var(--transition);
  border: 1px solid var(--gray-100);
  text-align: center;
}

.history-stat-value {
  font-size: 1.25rem;
  font-weight: 700;
  color: var(--secondary);
  margin-bottom: 0.25rem;
}

.history-stat-label {
  color: var(--gray-500);
  font-size: 0.875rem;
}

/* History Table */
.history-table th {
  position: sticky;
  top: 0;
  z-index: 10;
  font-size: 0.875rem;
  text-transform: capitalize;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 2rem;
  color: var(--gray-500);
}

.empty-icon {
  font-size: 2rem;
  margin-bottom: 0.75rem;
  color: var(--gray-400);
}

/* Pagination */
.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1rem;
  padding: 1rem;
  background: var(--gray-50);
  border-top: 1px solid var(--gray-200);
  border-bottom-left-radius: var(--border-radius-md);
  border-bottom-right-radius: var(--border-radius-md);
}

.pagination-info {
  font-size: 0.875rem;
  color: var(--gray-600);
}

.pagination {
  display: flex;
  gap: 0.5rem;
}

.pagination-btn {
  background: var(--white);
  border: 1px solid var(--gray-200);
  border-radius: var(--border-radius);
  padding: 0.375rem 0.75rem;
  font-size: 0.875rem;
  color: var(--gray-600);
  transition: var(--transition);
  cursor: pointer;
}

.pagination-btn:hover,
.pagination-btn.active {
  background: var(--primary-transparent);
  border-color: var(--primary);
  color: var(--primary);
}

.pagination-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Responsive */
@media (min-width: 992px) {
  .header-user-info {
    display: block;
  }

  .mobile-toggle {
    display: none;
  }
}

@media (max-width: 1400px) {
  .stats-grid {
    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  }
}

@media (max-width: 1200px) {
  .card-grid {
    grid-template-columns: 1fr;
  }

  .stats-grid {
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  }
}

@media (max-width: 992px) {
  .sidebar {
    transform: translateX(-100%);
    box-shadow: none;
    z-index: 1001;
  }

  .sidebar.active {
    transform: translateX(0);
    box-shadow: var(--shadow-lg);
  }

  .main-content {
    margin-left: 0 !important;
    width: 100% !important;
  }

  .mobile-toggle {
    display: flex;
  }

  .overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: var(--transition);
  }

  .overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .sidebar-toggle-container {
    display: none;
  }

  .stats-grid {
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  }

  .header-right {
    gap: 0.75rem;
  }
}

@media (max-width: 768px) {
  .header {
    padding: 0 1rem;
  }

  .content {
    padding: 1.25rem 1rem;
  }

  .stats-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .quick-actions {
    grid-template-columns: 1fr 1fr;
  }

  .row {
    flex-direction: column;
  }

  .row .form-group {
    width: 100%;
  }

  .card-header {
    padding: 1rem;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .card-body {
    padding: 1rem;
  }

  .balance-display {
    padding: 0.375rem 0.625rem;
  }

  .add-funds-btn {
    padding: 0.375rem 0.625rem;
  }

  .add-funds-btn span {
    display: none;
  }
}

@media (max-width: 576px) {
  .header-right {
    gap: 0.5rem;
  }

  .balance-display {
    padding: 0.375rem 0.5rem;
  }

  .add-funds-btn {
    padding: 0.375rem 0.5rem;
  }

  .quick-actions {
    grid-template-columns: 1fr;
  }

  .stats-grid {
    grid-template-columns: 1fr;
  }

  .form-row {
    flex-direction: column;
  }

  .form-row .form-group {
    width: 100%;
    padding: 0;
  }

  .btn {
    width: 100%;
  }

  .content {
    padding: 1rem 0.75rem;
  }

  .section-title {
    font-size: 1.375rem;
  }

  .header-action,
  .theme-toggle {
    width: 32px;
    height: 32px;
  }

  .header-avatar {
    width: 32px;
    height: 32px;
  }

  .dropdown-menu {
    width: 200px;
    right: -70px;
  }

  .dropdown-menu::before {
    content: "";
    position: absolute;
    top: -8px;
    right: 80px;
    width: 16px;
    height: 16px;
    background: var(--white);
    transform: rotate(45deg);
    border-top: 1px solid var(--gray-200);
    border-left: 1px solid var(--gray-200);
  }
}

/* Touch optimizations */
@media (pointer: coarse) {
  .menu-link,
  .dropdown-item,
  .btn,
  .quick-action,
  .header-action,
  .user-dropdown {
    min-height: 44px;
  }

  input,
  select,
  button {
    min-height: 44px;
  }

  .form-control,
  .form-select {
    font-size: 16px; /* Prevents iOS zoom on focus */
  }
}

/* History Tab Content */
.history-tab-content {
  display: none;
}

.history-tab-content.active {
  display: block;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Section */
.section {
  display: none;
  animation: fadeIn 0.3s ease;
}

.section.active {
  display: block;
}

/* Enhanced Order History Styles */
.number-cell {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.phone-number {
    font-family: 'Courier New', monospace;
    font-weight: 500;
}

.copy-btn {
    background: none;
    border: none;
    padding: 0.25rem;
    color: var(--gray-400);
    cursor: pointer;
    transition: var(--transition);
    border-radius: var(--border-radius-sm);
}

.copy-btn:hover {
    color: var(--primary);
    background: var(--primary-transparent);
}

.message-cell {
    max-width: 300px;
}

.message-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.message-text {
    font-size: 0.875rem;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.message-time {
    font-size: 0.75rem;
    color: var(--gray-500);
}

.duration-badge {
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius-sm);
    font-size: 0.75rem;
    font-weight: 500;
}

.duration-3days {
    background: var(--info);
    color: var(--white);
}

.duration-30days {
    background: var(--purple);
    color: var(--white);
}

.actions-cell {
    min-width: 120px;
}

.action-buttons {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
}

.action-btn {
    background: none;
    border: 1px solid var(--gray-300);
    padding: 0.375rem;
    border-radius: var(--border-radius-sm);
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 28px;
    height: 28px;
}

.action-btn:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-sm);
}

.check-btn {
    color: var(--info);
    border-color: var(--info);
}

.check-btn:hover {
    background: var(--info);
    color: var(--white);
}

.hotspot-btn {
    color: var(--orange);
    border-color: var(--orange);
}

.hotspot-btn:hover, .hotspot-btn.active {
    background: var(--orange);
    color: var(--white);
}

.dislike-btn {
    color: var(--danger);
    border-color: var(--danger);
}

.dislike-btn:hover, .dislike-btn.active {
    background: var(--danger);
    color: var(--white);
}

.cart-btn {
    color: var(--success);
    border-color: var(--success);
}

.cart-btn:hover, .cart-btn.active {
    background: var(--success);
    color: var(--white);
}

.renew-btn {
    color: var(--purple);
    border-color: var(--purple);
}

.renew-btn:hover {
    background: var(--purple);
    color: var(--white);
}

.extend-btn {
    color: var(--warning);
    border-color: var(--warning);
}

.extend-btn:hover {
    background: var(--warning);
    color: var(--white);
}

.cancel-btn {
    color: var(--danger);
    border-color: var(--danger);
}

.cancel-btn:hover {
    background: var(--danger);
    color: var(--white);
}

.reorder-btn {
    color: var(--success);
    border-color: var(--success);
}

.reorder-btn:hover {
    background: var(--success);
    color: var(--white);
}

.action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
}

.action-btn.loading i {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* API Alert Styles */
.api-alert {
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    position: fixed;
    top: 80px;
    right: 20px;
    max-width: 400px;
    z-index: 1000;
    animation: slideIn 0.3s ease-out;
}

.api-alert.alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
}

.api-alert.alert-success {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

/* Custom styles for order history page */
.price-display {
    font-weight: 600;
    font-family: 'Courier New', monospace;
    color: var(--success);
}

.badge-primary {
    background-color: var(--primary);
    color: var(--white);
}

.badge-success {
    background-color: var(--success);
    color: var(--white);
}

.badge-warning {
    background-color: var(--warning);
    color: var(--white);
}

.badge-danger {
    background-color: var(--danger);
    color: var(--white);
}

.badge-secondary {
    background-color: #6c757d;
    color: var(--white);
}

.badge-info {
    background-color: var(--info);
    color: var(--white);
    font-family: 'Courier New', monospace;
    font-weight: 500;
}

.text-muted {
    color: #6c757d !important;
    font-style: italic;
}

/* MDN column styling */
td[data-label="MDN"] .phone-number {
    font-family: 'Courier New', monospace;
    font-weight: 500;
    color: var(--primary);
}

/* Type column styling */
td[data-label="Type"] .badge {
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.375rem;
}

/* Status badge improvements */
td[data-label="Status"] .badge {
    text-transform: capitalize;
    font-weight: 500;
}

     </style>
</head>
<body>
        <div class="dashboard-container">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <a href="/user/dashboard" class="logo">
                    <div class="logo-container">
                        <div class="logo-icon">
                            <img src="/assets/images/codebypass-logo/codebypass-logo-white-text-bg.png" alt="CodeByPass Icon">
                        </div>
                        <img src="/assets/images/codebypass-logo/codebypass-logo-white-text-bg.png" alt="CodeByPass" class="logo-text">
                    </div>
                </a>
            </div>

            <div class="sidebar-menu">
                <ul>
                    <li class="menu-item">
                        <a href="/user/dashboard" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-th-large"></i></span>
                            <span class="menu-text">Dashboard</span>
                        </a>
                    </li>
                    
                    <div class="menu-category">Services</div>
                    
                    <li class="menu-item">
                        <a href="/user/temporary-number-s1" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-mobile-alt"></i></span>
                            <span class="menu-text">Temporary Number (S1)</span>
                        </a>
                    </li>
                    
                    
                    
                    <li class="menu-item">
                        <a href="/user/rental-number" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-phone"></i></span>
                            <span class="menu-text">Rental Number</span>
                        </a>
                    </li>
                    
                    <div class="menu-category">Account</div>
                    
                    <li class="menu-item">
                        <a href="/user/order-histories" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-history"></i></span>
                            <span class="menu-text">Order Histories</span>
                        </a>
                    </li>
                    
                    <li class="menu-item">
                        <a href="/user/deposit" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-wallet"></i></span>
                            <span class="menu-text">Deposit</span>
        <span class="menu-badge">$<%= user ? (user.balance || '0.00') : '0.00' %></span>
                        </a>
                    </li>
                    
                    <li class="menu-item">
                        <a href="/user/tickets" class="menu-link">
                            <span class="menu-icon"><i class="fas fa-ticket-alt"></i></span>
                            <span class="menu-text">Tickets</span>
                        </a>
                    </li>
                    
                   
                </ul>
            </div>
        </aside>

        <!-- Sidebar Toggle -->
        <div class="sidebar-toggle-container">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-chevron-left"></i>
            </button>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <header class="header">
                <div class="header-left">
                    <button class="mobile-toggle" id="mobileToggle">
                        <i class="fas fa-bars"></i>
                    </button>
                </div>
                
                <div class="header-right">
                     <div class="balance-display">
        <i class="fas fa-wallet balance-icon"></i>
        <span class="balance-amount">$<%= user ? (user.balance || '0.00') : '0.00' %></span>
    </div>
                    
                    <a href="/user/deposit" class="add-funds-btn">
                        <i class="fas fa-plus-circle"></i>
                        <span>Add Funds</span>
                    </a>
                    
                    <div class="user-dropdown" id="userDropdown">
<div class="header-avatar"><%= user ? user.username.charAt(0).toUpperCase() : 'U' %></div>
                        <div class="header-user-info">
    <div class="header-user-name"><%= user ? user.username : 'User' %></div>
    <div class="header-user-role"><%= user ? user.role : 'Member' %></div>
                        </div>
                        <i class="fas fa-chevron-down"></i>
                        
                        <!-- Dropdown Menu -->
                        <div class="dropdown-menu" id="dropdownMenu">
                            <div class="dropdown-header">
                                <div class="dropdown-user-info">
<div class="dropdown-user-name"><%= user ? user.username : 'User' %></div>
<div class="dropdown-user-email"><%= user ? user.email : 'user@example.com' %></div>
                                </div>
                            </div>
                            <div class="dropdown-body">
                                <a href="/user/user-profile" class="dropdown-item">
                                    <i class="fas fa-user"></i>
                                    <span>My Profile</span>
                                </a>
                                <div class="dropdown-divider"></div>
                                <div class="dropdown-item">
                                    <i class="fas fa-question-circle"></i>
                                    <span>Help Center</span>
                                </div>
                                <div class="dropdown-divider"></div>
                                <div class="dropdown-item">
                                    <i class="fas fa-sign-out-alt"></i>
                                    <span>Log Out</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Content Area -->
            <main class="content">
                <div class="section-header">
                    <h2 class="section-title">Order Histories</h2>
                    <p class="section-subtitle">View your past orders and rentals.</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title"><i class="fas fa-history"></i> Order Histories</h3>
                        <div class="card-actions">
                            <button class="btn btn-outline btn-sm" id="export-btn">
                                <i class="fas fa-download"></i> Export
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Improved Tab Design -->
                        <div class="history-tabs">
                            <div class="history-tab active" id="s1-tab">
                                <i class="fas fa-mobile-alt"></i>
                                <span>Temporary Number (S1)</span>
                            </div>
                            
                            <div class="history-tab" id="rental-tab">
                                <i class="fas fa-phone"></i>
                                <span>Rental Number</span>
                            </div>
                        </div>
                        
                        <!-- Filter Controls -->
                        <div class="history-filters">
                            <div class="date-range-filter">
                                <div class="date-range-input">
                                    <label for="date-from">From</label>
                                    <input type="date" id="date-from" class="form-control">
                                </div>
                                <div class="date-range-input">
                                    <label for="date-to">To</label>
                                    <input type="date" id="date-to" class="form-control">
                                </div>
                                <button class="btn btn-primary btn-sm filter-btn">
                                    <i class="fas fa-filter"></i> Filter
                                </button>
                                <button class="btn btn-outline btn-sm clear-filters-btn" onclick="clearFilters()">
                                    <i class="fas fa-times"></i> Clear
                                </button>
                            </div>
                            <div class="search-container">
                                <i class="fas fa-search search-icon"></i>
                                <input type="text" class="search-input" placeholder="Search orders...">
                            </div>
                        </div>
                        
                        <div class="history-tab-content active" id="s1-tab-content">
    <div class="history-stats">
        <div class="history-stat">
            <div class="history-stat-value">
                <% if (typeof s1Orders.total === 'number') { %>
                    <%= s1Orders.total.toLocaleString() %>
                <% } else { %>
                    0
                <% } %>
            </div>
            <div class="history-stat-label">Total Orders</div>
        </div>
        <div class="history-stat">
            <div class="history-stat-value">
                $<% 
                const totalSpent = Number(s1Orders.totalSpent) || 0;
                const formattedSpent = totalSpent.toFixed(2);
                const [dollars, cents] = formattedSpent.split('.');
                %>
                <%= dollars %>.<span class="decimal"><%= cents %></span>
            </div>
            <div class="history-stat-label">Total Spent</div>
        </div>
        <div class="history-stat">
            <div class="history-stat-value">
                <% 
                const successful = Number(s1Orders.successful) || 0;
                %>
                <%= successful.toLocaleString() %>
            </div>
            <div class="history-stat-label">Successful</div>
        </div>
        <div class="history-stat">
            <div class="history-stat-value">
                <% 
                const cancelled = Number(s1Orders.cancelled) || 0;
                %>
                <%= cancelled.toLocaleString() %>
            </div>
            <div class="history-stat-label">Cancelled</div>
        </div>
    </div>
</div>
                            <div class="table-container table-responsive-card">
                                <table class="table history-table">
                                    <thead>
                                        <tr>
                                            <th>Created at</th>
                                            <th>Number</th>
                                            <th>Service</th>
                                            <th>Status</th>
                                            <!-- <th>Type</th> -->
                                            <th>Price</th>
                                        </tr>
                                    </thead>
                                    <tbody id="s1-orders-table-body">
                                        <% if (s1Orders.orders && s1Orders.orders.length > 0) { %>
                                            <% s1Orders.orders.forEach(order => { %>
                                                <tr data-order-id="<%= order._id %>" data-created-at="<%= order.createdAt %>">
                                                    <td data-label="Created at"><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                                    <td data-label="Number" class="number-cell">
                                                        <span class="phone-number"><%= order.number %></span>
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <button class="copy-btn" onclick="copyToClipboard('<%= order.number %>')" title="Copy number">
                                                                <i class="fas fa-copy"></i>
                                                            </button>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Service"><%= order.service %></td>
                                                    <td data-label="Status">
                                                        <span class="badge badge-<%= order.status === 'completed' ? 'success' : order.status === 'pending' ? 'warning' : order.status === 'rejected' ? 'secondary' : order.status === 'failed' ? 'danger' : 'secondary' %>">
                                                            <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                        </span>
                                                    </td>
                                                    <!-- <td data-label="MDN">
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <span class="phone-number"><%= order.number %></span>
                                                        <% } else { %>
                                                            <span class="text-muted">N/A</span>
                                                        <% } %>
                                                    </td> -->
                                                    <!-- <td data-label="Type">
                                                        <span class="badge badge-primary">S1 Order</span>
                                                    </td> -->
                                                 
                                                    <td data-label="Price">
                                                        <span class="price-display" data-service="<%= order.service %>">
                                                            <%
                                                                // Find the service price based on service name
                                                                let servicePrice = '0.00';
                                                                if (typeof services !== 'undefined' && services) {
                                                                    const foundService = services.find(s => s.name === order.service);
                                                                    if (foundService) {
                                                                        servicePrice = (foundService.ltr_short_price || foundService.price || 0).toString();
                                                                        servicePrice = parseFloat(servicePrice).toFixed(2);
                                                                    }
                                                                } else {
                                                                    servicePrice = (order.price || 0).toFixed(2);
                                                                }
                                                            %>
                                                            $<%= servicePrice %>
                                                        </span>
                                                    </td>
                                                    <!-- <td data-label="Actions" class="actions-cell">
                                                        <div class="action-buttons">
                                                         
                                                                <button class="action-btn hotspot-btn <%= order.actions.hotspot ? 'active' : '' %>" 
                                                                        onclick="toggleAction('<%= order._id %>', 'hotspot')" 
                                                                        title="Toggle Hotspot" data-action="hotspot">
                                                                    <i class="fas fa-wifi"></i>
                                                                </button>
                                                                <button class="action-btn dislike-btn <%= order.actions.dislike ? 'active' : '' %>" 
                                                                        onclick="toggleAction('<%= order._id %>', 'dislike')" 
                                                                        title="Toggle Dislike" data-action="dislike">
                                                                    <i class="fas fa-thumbs-down"></i>
                                                                </button>
                                                                <button class="action-btn cart-btn <%= order.actions.addToCart ? 'active' : '' %>" 
                                                                        onclick="toggleAction('<%= order._id %>', 'addToCart')" 
                                                                        title="Toggle Cart" data-action="cart">
                                                                    <i class="fas fa-shopping-cart"></i>
                                                                </button>
                                                                <button class="action-btn renew-btn" onclick="renewOrder('<%= order._id %>')" 
                                                                        title="Renew Order" data-action="renew">
                                                                    <i class="fas fa-redo"></i>
                                                                </button>
                                                        </div>
                                                    </td> -->
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td data-label="Created at" colspan="7" class="table-empty">
                                                    <div class="empty-state">
                                                        <i class="fas fa-history empty-icon"></i>
                                                        <p>No order history found</p>
                                                        <a href="/user/temporary-number-s1" class="btn btn-primary btn-sm">
                                                            <i class="fas fa-shopping-cart"></i> Place an Order
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div class="history-tab-content" id="s2-tab-content">
                            <div class="history-stats">
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= s2Orders.total || 0 %></div>
                                    <div class="history-stat-label">Total Orders</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value">$<%= (s2Orders.totalSpent || 0).toFixed(2) %></div>
                                    <div class="history-stat-label">Total Spent</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= s2Orders.successful || 0 %></div>
                                    <div class="history-stat-label">Successful</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= s2Orders.cancelled || 0 %></div>
                                    <div class="history-stat-label">Cancelled</div>
                                </div>
                            </div>
                            
                            <div class="table-container table-responsive-card">
                                <table class="table history-table">
                                    <thead>
                                        <tr>
                                            <th>Created at</th>
                                            <th>Number</th>
                                            <th>Service</th>
                                            <th>Pin</th>
                                            <th>Status</th>
                                            <th>MDN</th>
                                            <th>Type</th>
                                            <th>Price</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (s2Orders.orders && s2Orders.orders.length > 0) { %>
                                            <% s2Orders.orders.forEach(order => { %>
                                                <tr>
                                                    <td data-label="Created at"><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                                    <td data-label="Number" class="number-cell">
                                                        <span class="phone-number"><%= order.number %></span>
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <button class="copy-btn" onclick="copyToClipboard('<%= order.number %>')" title="Copy number">
                                                                <i class="fas fa-copy"></i>
                                                            </button>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Service"><%= order.service %></td>
                                                    <td data-label="Pin">
                                                        <% if (order.pin) { %>
                                                            <span class="badge badge-info"><%= order.pin %></span>
                                                        <% } else { %>
                                                            <span class="text-muted">N/A</span>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Status">
                                                        <span class="badge badge-<%= order.status === 'completed' ? 'success' : order.status === 'pending' ? 'warning' : order.status === 'rejected' ? 'secondary' : order.status === 'failed' ? 'danger' : 'secondary' %>">
                                                            <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                        </span>
                                                    </td>
                                                    <td data-label="MDN">
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <span class="phone-number"><%= order.number %></span>
                                                        <% } else { %>
                                                            <span class="text-muted">N/A</span>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Type">
                                                        <span class="badge badge-success">S2 Order</span>
                                                    </td>
                                                    <td data-label="Price">
                                                        <span class="price-display" data-service="<%= order.service %>">
                                                            <%
                                                                // Find the service price based on service name
                                                                let servicePrice = '0.00';
                                                                if (typeof services !== 'undefined' && services) {
                                                                    const foundService = services.find(s => s.name === order.service);
                                                                    if (foundService) {
                                                                        servicePrice = (foundService.ltr_short_price || foundService.price || 0).toString();
                                                                        servicePrice = parseFloat(servicePrice).toFixed(2);
                                                                    }
                                                                } else {
                                                                    servicePrice = (order.price || 0).toFixed(2);
                                                                }
                                                            %>
                                                            $<%= servicePrice %>
                                                        </span>
                                                    </td>
                                                    <td data-label="Actions">
                                                        <button class="btn btn-icon btn-sm">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td data-label="Created at" colspan="9" class="table-empty">
                                                    <div class="empty-state">
                                                        <i class="fas fa-history empty-icon"></i>
                                                        <p>No S2 order history found</p>
                                                        <button class="btn btn-primary btn-sm">
                                                            <i class="fas fa-shopping-cart"></i> Place an Order
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <div class="history-tab-content" id="rental-tab-content">
                            <div class="history-stats">
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.total || 0 %></div>
                                    <div class="history-stat-label">Total Rentals</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value">$<%= (rentals.totalSpent || 0).toFixed(2) %></div>
                                    <div class="history-stat-label">Total Spent</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.active || 0 %></div>
                                    <div class="history-stat-label">Active</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.expired || 0 %></div>
                                    <div class="history-stat-label">Expired</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.cancelled || 0 %></div>
                                    <div class="history-stat-label">Cancelled</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value">$<%= (rentals.averageRentalValue || 0).toFixed(2) %></div>
                                    <div class="history-stat-label">Avg Value</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.thisMonth || 0 %></div>
                                    <div class="history-stat-label">This Month</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.shortTerm || 0 %></div>
                                    <div class="history-stat-label">3-Day Plans</div>
                                </div>
                                <div class="history-stat">
                                    <div class="history-stat-value"><%= rentals.longTerm || 0 %></div>
                                    <div class="history-stat-label">30-Day Plans</div>
                                </div>
                            </div>
                            
                            <div class="table-container table-responsive-card">
                                <table class="table history-table">
                                    <thead>
                                        <tr>
                                            <th>Created at</th>
                                            <th>Number</th>
                                            <th>Service</th>
                                            <th>Duration</th>
                                            <th>Status</th>
                                            <th>Last Message</th>
                                            <th>MDN</th>
                                            <th>Type</th>
                                            <th>Price</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="rental-orders-table-body">
                                        <% if (rentals.orders && rentals.orders.length > 0) { %>
                                            <% rentals.orders.forEach(order => { %>
                                                <tr data-rental-id="<%= order._id %>" data-created-at="<%= order.createdAt %>">
                                                    <td data-label="Created at"><%= new Date(order.createdAt).toLocaleDateString() %></td>
                                                    <td data-label="Number" class="number-cell">
                                                        <span class="phone-number"><%= order.number %></span>
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <button class="copy-btn" onclick="copyToClipboard('<%= order.number %>')" title="Copy number">
                                                                <i class="fas fa-copy"></i>
                                                            </button>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Service"><%= order.service %></td>
                                                    <td data-label="Duration">
                                                        <span class="duration-badge duration-<%= order.duration %>">
                                                            <%= order.duration === '3days' ? '3 Days' : '30 Days' %>
                                                        </span>
                                                    </td>
                                                    <td data-label="Status">
                                                        <span class="badge badge-<%= order.status === 'active' ? 'success' : order.status === 'expired' ? 'warning' : order.status === 'cancelled' ? 'danger' : 'secondary' %>">
                                                            <%= order.status.charAt(0).toUpperCase() + order.status.slice(1) %>
                                                        </span>
                                                    </td>
                                                    <td data-label="Last Message" class="message-cell">
                                                        <div class="message-content">
                                                            <span class="message-text" id="rental-message-<%= order._id %>">
                                                                <%= order.lastMessage || 'No messages yet' %>
                                                            </span>
                                                            <% if (order.lastMessageTime) { %>
                                                                <span class="message-time">
                                                                    <%= new Date(order.lastMessageTime).toLocaleTimeString() %>
                                                                </span>
                                                            <% } %>
                                                        </div>
                                                    </td>
                                                    <td data-label="MDN">
                                                        <% if (order.number && order.number !== 'Pending...') { %>
                                                            <span class="phone-number"><%= order.number %></span>
                                                        <% } else { %>
                                                            <span class="text-muted">N/A</span>
                                                        <% } %>
                                                    </td>
                                                    <td data-label="Type">
                                                        <span class="badge badge-warning">Rental</span>
                                                    </td>
                                                    <td data-label="Price">
                                                        <span class="price-display" data-service="<%= order.service %>">
                                                            <%
                                                                // Find the service price based on service name
                                                                let servicePrice = '0.00';
                                                                if (typeof services !== 'undefined' && services) {
                                                                    const foundService = services.find(s => s.name === order.service);
                                                                    if (foundService) {
                                                                        // For rentals, use ltr_price (full price) instead of ltr_short_price
                                                                        servicePrice = (foundService.ltr_price || foundService.price || 0).toString();
                                                                        servicePrice = parseFloat(servicePrice).toFixed(2);
                                                                    }
                                                                } else {
                                                                    servicePrice = (order.price || 0).toFixed(2);
                                                                }
                                                            %>
                                                            $<%= servicePrice %>
                                                        </span>
                                                    </td>
                                                    <td data-label="Actions" class="actions-cell">
                                                        <div class="action-buttons">
                                                            <% if (order.status === 'active') { %>
                                                                <!-- <button class="action-btn check-btn" onclick="checkRentalMessages('<%= order._id %>')" 
                                                                        title="Check Messages" data-action="check">
                                                                    <i class="fas fa-sync-alt"></i>
                                                                </button> -->
                                                                <button class="action-btn extend-btn" onclick="extendRentalFromHistory('<%= order._id %>')" 
                                                                        title="Extend Rental" data-action="extend">
                                                                    <i class="fas fa-clock"></i>
                                                                </button>
                                                                <button class="action-btn cancel-btn" onclick="cancelRentalFromHistory('<%= order._id %>')" 
                                                                        title="Cancel Rental" data-action="cancel">
                                                                    <i class="fas fa-times"></i>
                                                                </button>
                                                            <% } else { %>
                                                                <button class="action-btn reorder-btn" onclick="reorderRentalFromHistory('<%= order._id %>')" 
                                                                        title="Reorder" data-action="reorder">
                                                                    <i class="fas fa-redo"></i>
                                                                </button>
                                                            <% } %>
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td data-label="Created at" colspan="10" class="table-empty">
                                                    <div class="empty-state">
                                                        <i class="fas fa-phone empty-icon"></i>
                                                        <p>No rental history found</p>
                                                        <a href="/user/rental-number" class="btn btn-primary btn-sm">
                                                            <i class="fas fa-phone"></i> Rent a Number
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        
                        <!-- Pagination -->
                        <div class="pagination-container">
                            <div class="pagination-info">Showing <%= pagination.showingStart %> to <%= pagination.showingEnd %> of <%= pagination.total %> entries</div>
                            <div class="pagination">
                                <button class="pagination-btn" <%= pagination.currentPage === 1 ? 'disabled' : '' %>>
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                                    <button class="pagination-btn <%= pagination.currentPage === i ? 'active' : '' %>">
                                        <%= i %>
                                    </button>
                                <% } %>
                                <button class="pagination-btn" <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>>
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <div class="overlay" id="overlay"></div>

    <!-- JavaScript -->
    <script>
        // Global Variables
        let currentS1Orders = [];
        let currentRentals = [];
        let balanceRefreshInterval;
        
        // DOM Elements
        const sidebar = document.getElementById('sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const mobileToggle = document.getElementById('mobileToggle');
        const overlay = document.getElementById('overlay');
        const userDropdown = document.getElementById('userDropdown');
        const dropdownMenu = document.getElementById('dropdownMenu');
        
        // Sidebar Functionality
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('sidebar-collapsed');
        });
        
        mobileToggle.addEventListener('click', () => {
            sidebar.classList.add('active');
            overlay.classList.add('active');
            document.body.style.overflow = 'hidden';
        });
        
        overlay.addEventListener('click', () => {
            sidebar.classList.remove('active');
            overlay.classList.remove('active');
            document.body.style.overflow = '';
        });
        
        // User Dropdown
        userDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdownMenu.classList.toggle('active');
        });
        
        document.addEventListener('click', () => {
            dropdownMenu.classList.remove('active');
        });
        
        // Utility Functions
        function showAlert(message, type = 'error') {
            document.querySelectorAll('.api-alert').forEach(el => el.remove());
            
            const alertDiv = document.createElement('div');
            alertDiv.className = `api-alert alert-${type}`;
            alertDiv.textContent = message;
            
            const content = document.querySelector('.content');
            content.insertBefore(alertDiv, content.firstChild);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
        
        async function makeAPICall(url, options = {}) {
            try {
                const response = await fetch(url, {
                    headers: {
                        'Content-Type': 'application/json',
                        ...options.headers
                    },
                    ...options
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.message || 'API request failed');
                }
                
                return data;
            } catch (error) {
                console.error('API Error:', error);
                throw error;
            }
        }
        
        function refreshBalance() {
            fetch('/user/api/profile-data')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const balanceElements = document.querySelectorAll('.balance-amount, .menu-badge');
                        balanceElements.forEach(el => {
                            el.textContent = `$${(data.user?.balance || 0).toFixed(2)}`;
                        });
                    }
                })
                .catch(err => console.error('Error refreshing balance:', err));
        }
        
        // Tab Functionality
        const tabs = document.querySelectorAll('.history-tab');
        const tabContents = document.querySelectorAll('.history-tab-content');
        
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Remove active class from all tabs
                tabs.forEach(t => t.classList.remove('active'));
                
                // Add active class to clicked tab
                tab.classList.add('active');
                
                // Show corresponding tab content
                const tabId = tab.id;
                const contentId = tabId + '-content';
                
                tabContents.forEach(content => {
                    content.classList.remove('active');
                    if (content.id === contentId) {
                        content.classList.add('active');
                    }
                });
                
                // Reapply filters when switching tabs
                setTimeout(() => {
                    applyFilters();
                }, 100);
            });
        });
        
        // Copy to Clipboard Function
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                showAlert('Number copied to clipboard!', 'success');
            }).catch(() => {
                const textarea = document.createElement('textarea');
                textarea.value = text;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                showAlert('Number copied to clipboard!', 'success');
            });
        }
        
        // Export Functions
        function exportToCSV() {
            const activeTab = document.querySelector('.history-tab.active');
            if (!activeTab) {
                showAlert('No active tab found', 'error');
                return;
            }
            
            let tableId, filename, headers;
            
            if (activeTab.id === 's1-tab') {
                tableId = 's1-orders-table-body';
                filename = 'temporary_number_orders.csv';
                headers = ['Created At', 'Number', 'Service', 'Status', 'Price'];
            } else if (activeTab.id === 'rental-tab') {
                tableId = 'rental-orders-table-body';
                filename = 'rental_number_orders.csv';
                headers = ['Created At', 'Number', 'Service', 'Duration', 'Status', 'Last Message', 'MDN', 'Type', 'Price'];
            } else {
                showAlert('Unknown tab type', 'error');
                return;
            }
            
            const tbody = document.getElementById(tableId);
            if (!tbody) {
                showAlert('Table not found', 'error');
                return;
            }
            
            // Get visible rows only (respects current filters)
            const rows = Array.from(tbody.querySelectorAll('tr')).filter(row => 
                row.style.display !== 'none' && 
                (row.dataset.orderId || row.dataset.rentalId)
            );
            
            if (rows.length === 0) {
                showAlert('No data to export', 'warning');
                return;
            }
            
            // Create CSV content
            let csvContent = headers.join(',') + '\n';
            
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const rowData = [];
                
                if (activeTab.id === 's1-tab') {
                    // S1 Orders: Created At, Number, Service, Status, Price
                    rowData.push(
                        `"${cells[0].textContent.trim()}"`, // Created At
                        `"${cells[1].querySelector('.phone-number')?.textContent.trim() || 'N/A'}"`, // Number
                        `"${cells[2].textContent.trim()}"`, // Service
                        `"${cells[3].querySelector('.badge')?.textContent.trim() || 'N/A'}"`, // Status
                        `"${cells[4].querySelector('.price-display')?.textContent.trim() || 'N/A'}"` // Price
                    );
                } else if (activeTab.id === 'rental-tab') {
                    // Rental Orders: Created At, Number, Service, Duration, Status, Last Message, MDN, Type, Price
                    rowData.push(
                        `"${cells[0].textContent.trim()}"`, // Created At
                        `"${cells[1].querySelector('.phone-number')?.textContent.trim() || 'N/A'}"`, // Number
                        `"${cells[2].textContent.trim()}"`, // Service
                        `"${cells[3].querySelector('.duration-badge')?.textContent.trim() || 'N/A'}"`, // Duration
                        `"${cells[4].querySelector('.badge')?.textContent.trim() || 'N/A'}"`, // Status
                        `"${cells[5].querySelector('.message-text')?.textContent.trim().replace(/"/g, '""') || 'N/A'}"`, // Last Message (escape quotes)
                        `"${cells[6].querySelector('.phone-number')?.textContent.trim() || 'N/A'}"`, // MDN
                        `"${cells[7].querySelector('.badge')?.textContent.trim() || 'N/A'}"`, // Type
                        `"${cells[8].querySelector('.price-display')?.textContent.trim() || 'N/A'}"` // Price
                    );
                }
                
                csvContent += rowData.join(',') + '\n';
            });
            
            // Create and trigger download
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showAlert(`Exported ${rows.length} records to ${filename}`, 'success');
        }
        
        // Setup Export Button
        function setupExportButton() {
            const exportBtn = document.getElementById('export-btn');
            if (exportBtn) {
                exportBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const icon = exportBtn.querySelector('i');
                    
                    // Show loading state
                    exportBtn.disabled = true;
                    icon.classList.remove('fa-download');
                    icon.classList.add('fa-spinner', 'fa-spin');
                    
                    // Delay to show loading state
                    setTimeout(() => {
                        try {
                            exportToCSV();
                        } catch (error) {
                            console.error('Export error:', error);
                            showAlert('Export failed: ' + error.message, 'error');
                        } finally {
                            // Reset button state
                            exportBtn.disabled = false;
                            icon.classList.remove('fa-spinner', 'fa-spin');
                            icon.classList.add('fa-download');
                        }
                    }, 500);
                });
            }
        }
        
        // S1 Orders Functions
        async function checkOrderMessages(orderId) {
            const button = document.querySelector(`[onclick="checkOrderMessages('${orderId}')"]`);
            const icon = button.querySelector('i');
            
            button.disabled = true;
            icon.classList.add('fa-spin');
            
            try {
                const result = await makeAPICall(`/user/api/orders/${orderId}/messages`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    const messageElement = document.getElementById(`s1-message-${orderId}`);
                    if (messageElement && result.lastMessage) {
                        messageElement.textContent = result.lastMessage;
                    }
                    showAlert('Messages checked successfully!', 'success');
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to check messages', 'error');
            } finally {
                button.disabled = false;
                icon.classList.remove('fa-spin');
            }
        }
        
        async function toggleAction(orderId, action) {
            const button = document.querySelector(`[onclick="toggleAction('${orderId}', '${action}')"]`);
            
            try {
                const result = await makeAPICall(`/user/api/orders/${orderId}/action`, {
                    method: 'POST',
                    body: JSON.stringify({ action })
                });
                
                if (result.success) {
                    button.classList.toggle('active');
                    showAlert(`${action} toggled successfully!`, 'success');
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || `Failed to toggle ${action}`, 'error');
            }
        }
        
        async function renewOrder(orderId) {
            try {
                const result = await makeAPICall(`/user/api/orders/${orderId}/renew`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    showAlert('Order renewed successfully!', 'success');
                    await loadS1Orders();
                    refreshBalance();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to renew order', 'error');
            }
        }
        
        // Rental Functions
        async function checkRentalMessages(rentalId) {
            const button = document.querySelector(`[onclick="checkRentalMessages('${rentalId}')"]`);
            const icon = button.querySelector('i');
            
            button.disabled = true;
            icon.classList.add('fa-spin');
            
            try {
                const result = await makeAPICall(`/user/api/rentals/${rentalId}/messages`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    const messageElement = document.getElementById(`rental-message-${rentalId}`);
                    if (messageElement && result.lastMessage) {
                        messageElement.textContent = result.lastMessage;
                    }
                    showAlert('Messages checked successfully!', 'success');
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to check messages', 'error');
            } finally {
                button.disabled = false;
                icon.classList.remove('fa-spin');
            }
        }
        
        async function extendRentalFromHistory(rentalId) {
            if (!confirm('Are you sure you want to extend this rental?')) return;
            
            try {
                const result = await makeAPICall(`/user/api/rentals/${rentalId}/extend`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    showAlert('Rental extended successfully!', 'success');
                    await loadRentals();
                    refreshBalance();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to extend rental', 'error');
            }
        }
        
        async function cancelRentalFromHistory(rentalId) {
            if (!confirm('Are you sure you want to cancel this rental?')) return;
            
            try {
                const result = await makeAPICall(`/user/api/rentals/${rentalId}/cancel`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    showAlert('Rental cancelled successfully!', 'success');
                    await loadRentals();
                    refreshBalance();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to cancel rental', 'error');
            }
        }
        
        async function reorderRentalFromHistory(rentalId) {
            try {
                const result = await makeAPICall(`/user/api/rentals/${rentalId}/reorder`, {
                    method: 'POST'
                });
                
                if (result.success) {
                    showAlert('Rental reordered successfully!', 'success');
                    await loadRentals();
                    refreshBalance();
                } else {
                    showAlert(result.message, 'error');
                }
            } catch (error) {
                showAlert(error.message || 'Failed to reorder rental', 'error');
            }
        }
        
        // Data Loading Functions
        async function loadS1Orders() {
            try {
                const data = await makeAPICall('/user/api/orders');
                if (data.success) {
                    currentS1Orders = data.orders;
                    updateS1OrdersTable(currentS1Orders);
                }
            } catch (error) {
                console.error('Failed to load S1 orders:', error);
            }
        }
        
        async function loadRentals() {
            try {
                const data = await makeAPICall('/user/api/rentals');
                if (data.success) {
                    currentRentals = data.rentals;
                    updateRentalsTable(currentRentals);
                }
            } catch (error) {
                console.error('Failed to load rentals:', error);
            }
        }
        
        function updateS1OrdersTable(orders) {
            const tbody = document.getElementById('s1-orders-table-body');
            if (!tbody) return;
            
            // Update table dynamically if needed
            // This would involve recreating the table rows with new data
        }
        
        function updateRentalsTable(rentals) {
            const tbody = document.getElementById('rental-orders-table-body');
            if (!tbody) return;
            
            // Update table dynamically if needed
            // This would involve recreating the table rows with new data
        }
        
        // Search Functionality
        function setupSearch() {
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.addEventListener('input', (e) => {
                    applyFilters();
                });
            }
        }
        
        // Date Filter Functionality
        function setupDateFilters() {
            const dateFromInput = document.getElementById('date-from');
            const dateToInput = document.getElementById('date-to');
            const filterBtn = document.querySelector('.filter-btn');
            
            if (dateFromInput && dateToInput && filterBtn) {
                // Apply filters when date inputs change
                dateFromInput.addEventListener('change', applyFilters);
                dateToInput.addEventListener('change', applyFilters);
                
                // Apply filters when filter button is clicked
                filterBtn.addEventListener('click', applyFilters);
            }
        }
        
        function applyFilters() {
            const searchInput = document.querySelector('.search-input');
            const dateFromInput = document.getElementById('date-from');
            const dateToInput = document.getElementById('date-to');
            
            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            const dateFrom = dateFromInput ? new Date(dateFromInput.value) : null;
            const dateTo = dateToInput ? new Date(dateToInput.value) : null;
            
            // Set time to end of day for "to" date to include the entire day
            if (dateTo) {
                dateTo.setHours(23, 59, 59, 999);
            }
            
            const activeTab = document.querySelector('.history-tab.active');
            if (!activeTab) return;
            
            let tableId;
            if (activeTab.id === 's1-tab') {
                tableId = 's1-orders-table-body';
            } else if (activeTab.id === 'rental-tab') {
                tableId = 'rental-orders-table-body';
            } else {
                return;
            }
            
            const rows = document.querySelectorAll(`#${tableId} tr[data-order-id], #${tableId} tr[data-rental-id]`);
            let visibleCount = 0;
            
            rows.forEach(row => {
                let shouldShow = true;
                
                // Apply text search filter
                if (searchTerm) {
                    const text = row.textContent.toLowerCase();
                    if (!text.includes(searchTerm)) {
                        shouldShow = false;
                    }
                }
                
                // Apply date range filter
                if (shouldShow && (dateFrom || dateTo)) {
                    // Get the raw date from data attribute
                    const rawDate = row.dataset.createdAt;
                    
                    if (rawDate) {
                        const rowDate = new Date(rawDate);
                        
                        if (!isNaN(rowDate.getTime())) {
                            if (dateFrom && rowDate < dateFrom) {
                                shouldShow = false;
                            }
                            if (dateTo && rowDate > dateTo) {
                                shouldShow = false;
                            }
                        }
                    }
                }
                
                if (shouldShow) {
                    row.style.display = '';
                    visibleCount++;
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Update pagination info if needed
            updateFilterResults(visibleCount, rows.length);
        }
        
        function updateFilterResults(visibleCount, totalCount) {
            const paginationInfo = document.querySelector('.pagination-info');
            if (paginationInfo) {
                if (visibleCount === totalCount) {
                    paginationInfo.textContent = `Showing ${visibleCount} of ${totalCount} entries`;
                } else {
                    paginationInfo.textContent = `Showing ${visibleCount} of ${totalCount} entries (filtered)`;
                }
            }
        }
        
        function clearFilters() {
            const searchInput = document.querySelector('.search-input');
            const dateFromInput = document.getElementById('date-from');
            const dateToInput = document.getElementById('date-to');
            
            if (searchInput) searchInput.value = '';
            if (dateFromInput) dateFromInput.value = '';
            if (dateToInput) dateToInput.value = '';
            
            applyFilters();
        }
        
        // Window Resize Handling
        window.addEventListener('resize', function() {
            if (window.innerWidth >= 992 && overlay.classList.contains('active')) {
                overlay.classList.remove('active');
                document.body.style.overflow = '';
            }
            dropdownMenu.classList.remove('active');
        });
        
        // iOS 100vh Fix
        function setVH() {
            let vh = window.innerHeight * 0.01;
            document.documentElement.style.setProperty('--vh', `${vh}px`);
        }
        window.addEventListener('resize', setVH);
        setVH();
        
        // Make functions global
        window.copyToClipboard = copyToClipboard;
        window.checkOrderMessages = checkOrderMessages;
        window.toggleAction = toggleAction;
        window.renewOrder = renewOrder;
        window.checkRentalMessages = checkRentalMessages;
        window.extendRentalFromHistory = extendRentalFromHistory;
        window.cancelRentalFromHistory = cancelRentalFromHistory;
        window.reorderRentalFromHistory = reorderRentalFromHistory;
        window.clearFilters = clearFilters;
        window.applyFilters = applyFilters;
        window.exportToCSV = exportToCSV;
        
        // Initialization
        document.addEventListener('DOMContentLoaded', function() {
            refreshBalance();
            setupSearch();
            setupDateFilters();
            setupExportButton();
            
            // Set up periodic balance refresh
            balanceRefreshInterval = setInterval('balance-refresh', refreshBalance, 30000);
            
            // Set up periodic data refresh
            setInterval('rentals-refresh', () => {
                loadS1Orders();
                loadRentals();
            }, 60000);
        });
        
        // Cleanup on page unload
        window.addEventListener('page-hidden', () => {
                        window.intervalManager.clearAll();
                    });
                    window.addEventListener('beforeunload', () => {
            if (balanceRefreshInterval) {
                clearInterval('balanceRefresh');
            }
        });
    </script>
</body>
</html>