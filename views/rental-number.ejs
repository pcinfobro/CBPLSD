<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CodeByPass - Rental Number</title>
    <!-- Google Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <!-- Font Awesome Icons -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <!-- Lottie Player -->
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>
    <!-- Custom CSS with cache-busting to avoid stale styles -->
    <link rel="stylesheet" href="/css/rental-number.css?v=<%= cacheBuster || '' %>">
  </head>
  <body>
    <div class="dashboard-container">
      <!-- Sidebar -->
      <aside class="sidebar" id="sidebar">
        <div class="sidebar-header">
                          <a href="/user/dashboard" class="logo">
            <div class="logo-container">
              <div class="logo-icon">
                <img
                  src="/assets/images/codebypass-logo/codebypass-logo-white-text-bg.png"
                  alt="CodeByPass Icon"
                />
              </div>
              <img
                src="/assets/images/codebypass-logo/codebypass-logo-white-text-bg.png"
                alt="CodeByPass"
                class="logo-text"
              />
            </div>
          </a>
        </div>

        <div class="sidebar-menu">
          <ul>
            <li class="menu-item">
                              <a href="/user/dashboard" class="menu-link">
                <span class="menu-icon"><i class="fas fa-th-large"></i></span>
                <span class="menu-text">Dashboard</span>
              </a>
            </li>

            <div class="menu-category">Services</div>

            <li class="menu-item">
              <a href="/user/temporary-number-s1" class="menu-link">
                <span class="menu-icon"><i class="fas fa-mobile-alt"></i></span>
                <span class="menu-text">Temporary Number (S1)</span>
              </a>
            </li>

            <li class="menu-item">
              <a href="/user/rental-number" class="menu-link">
                <span class="menu-icon"><i class="fas fa-phone"></i></span>
                <span class="menu-text">Rental Number</span>
              </a>
            </li>

            <div class="menu-category">Account</div>

            <li class="menu-item">
              <a href="/user/order-histories" class="menu-link">
                <span class="menu-icon"><i class="fas fa-history"></i></span>
                <span class="menu-text">Order Histories</span>
              </a>
            </li>

            <li class="menu-item">
              <a href="/user/deposit" class="menu-link">
                <span class="menu-icon"><i class="fas fa-wallet"></i></span>
                <span class="menu-text">Deposit</span>
                <span class="menu-badge"
                  >$<%= user ? (user.balance || '0.00') : '0.00' %></span
                >
              </a>
            </li>

            <li class="menu-item">
              <a href="/user/tickets" class="menu-link">
                <span class="menu-icon"><i class="fas fa-ticket-alt"></i></span>
                <span class="menu-text">Tickets</span>
              </a>
            </li>
          </ul>
        </div>
      </aside>

      <!-- Sidebar Toggle -->
      <div class="sidebar-toggle-container">
        <button class="sidebar-toggle" id="sidebarToggle">
          <i class="fas fa-chevron-left"></i>
        </button>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <!-- Header -->
        <header class="header">
          <div class="header-left">
            <button class="mobile-toggle" id="mobileToggle">
              <i class="fas fa-bars"></i>
            </button>
          </div>

          <div class="header-right">
            <div class="balance-display">
              <i class="fas fa-wallet balance-icon"></i>
              <span class="balance-amount"
                >$<%= user ? (user.balance || '0.00') : '0.00' %></span
              >
            </div>

            <a href="/user/deposit" class="add-funds-btn">
              <i class="fas fa-plus-circle"></i>
              <span>Add Funds</span>
            </a>

            <div class="user-dropdown" id="userDropdown">
              <div class="header-avatar">
                <%= user ? user.username.charAt(0).toUpperCase() : 'U' %>
              </div>
              <div class="header-user-info">
                <div class="header-user-name">
                  <%= user ? user.username : 'User' %>
                </div>
                <div class="header-user-role">
                  <%= user ? user.role : 'Member' %>
                </div>
              </div>
              <i class="fas fa-chevron-down"></i>

              <!-- Dropdown Menu -->
              <div class="dropdown-menu" id="dropdownMenu">
                <div class="dropdown-header">
                  <div class="dropdown-user-info">
                    <div class="dropdown-user-name">
                      <%= user ? user.username : 'User' %>
                    </div>
                    <div class="dropdown-user-email">
                      <%= user ? user.email : 'user@example.com' %>
                    </div>
                  </div>
                </div>
                <div class="dropdown-body">
                  <a href="/user/user-profile" class="dropdown-item">
                    <i class="fas fa-user"></i>
                    <span>My Profile</span>
                  </a>
                  <div class="dropdown-divider"></div>
                  <div class="dropdown-item">
                    <i class="fas fa-question-circle"></i>
                    <span>Help Center</span>
                  </div>
                  <div class="dropdown-divider"></div>
                  <div class="dropdown-item">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Log Out</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>

        <!-- Content Area -->
        <main class="content">
          <div class="section-header">
            <h2 class="section-title">Rental Number</h2>
            <p class="section-subtitle">
              Rent phone numbers for longer periods.
            </p>
          </div>

          <div class="card">
            <div class="card-header">
              <h3 class="card-title">
                <i class="fas fa-info-circle"></i> How it works?
              </h3>
            </div>
            <div class="card-body">
              <p>
                At present, we exclusively offer USA rental numbers. To place an
                order for a Rental number, first, choose the Service and then
                select your preferred State. The price will be displayed under
                the service menu selection. The rental period for the number is
                30 days, but you can easily extend it by renewing before the
                period ends. We also offer a 3-day rental option at a fraction
                of the price.
              </p>
            </div>
          </div>
          <br />
          <div class="card">
            <div class="card-header">
              <h3 class="card-title">
                <i class="fas fa-phone"></i> Advanced Order
              </h3>
            </div>
            <div class="card-body">
              <div class="form-group">
                <h4>Configure Number</h4>
                <div class="row">
                  <div class="form-group">
                    <label for="rental-service" class="form-label"
                      >Service</label
                    >

                    <div
                      class="searchable-dropdown"
                      id="rental-service-dropdown"
                    >
                      <div
                        class="dropdown-toggle"
                        onclick="toggleDropdown('rental-service-dropdown')"
                      >
                        <span class="selected-text">Select Service ...</span>
                        <i class="fas fa-chevron-down"></i>
                      </div>
                      <div class="dropdown-menu">
                        <div class="search-box">
                          <i class="fas fa-search"></i>
                          <input
                            type="text"
                            placeholder="Search services..."
                            oninput="filterServices('rental-service-dropdown', this.value)"
                          />
                        </div>

                        <div
                          class="dropdown-options"
                          id="rental-service-options"
                        >
                          <!-- Services will be loaded dynamically -->
                          <div class="option">
                            <span class="option-text">Loading services...</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    <input type="hidden" id="rental-service" name="service" />
                  </div>
                  <div class="form-group">
                    <label for="rental-state" class="form-label">State</label>
                    <select class="form-select" id="rental-state">
                      <option value="random" selected>Random Location</option>
                      <% states.forEach(state => { %>
                      <option value="<%= state.value %>">
                        <%= state.name %>
                      </option>
                      <% }); %>
                    </select>
                  </div>
                </div>
                <div
                  style="
                    display: flex;
                    gap: 1rem;
                    margin-top: 1rem;
                    flex-wrap: wrap;
                  "
                >
                  <button
                    type="button"
                    class="btn btn-primary"
                    onclick="createRentalOrder('3days')"
                  >
                    <i class="fas fa-calendar-alt"></i> Order for (3 days) -
                    <span id="price-3days">$0.00</span>
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    onclick="createRentalOrder('30days')"
                  >
                    <i class="fas fa-calendar-check"></i> Order for (30 days) -
                    <span id="price-30days">$0.00</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
          <br />
          <div class="card">
            <div class="card-header">
              <h3 class="card-title">
                <i class="fas fa-sms"></i> Rental History
              </h3>
              <button
                class="btn btn-outline btn-sm"
                onclick="forceRefreshRentals()"
              >
                <i class="fas fa-sync-alt"></i> Refresh
              </button>
            </div>
            <div class="card-body">
              <!-- Filters Section -->
              <div class="rental-filters">
                <div class="filter-row">
                  <div class="filter-group">
                    <label>Status Filter:</label>
                    <select id="status-filter" onchange="applyFilters()">
                      <option value="">All Statuses</option>
                      <option value="active">Active</option>
                      <option value="expired">Expired</option>
                      <option value="cancelled">Cancelled</option>
                    </select>
                  </div>
                  <div class="filter-group">
                    <label>Duration Filter:</label>
                    <select id="duration-filter" onchange="applyFilters()">
                      <option value="">All Durations</option>
                      <option value="3days">3 Days</option>
                      <option value="30days">30 Days</option>
                    </select>
                  </div>
                  <div class="filter-group">
                    <label>Service Filter:</label>
                    <select id="service-filter" onchange="applyFilters()">
                      <option value="">All Services</option>
                    </select>
                  </div>
                  <div class="filter-group">
                    <label>Date Range:</label>
                    <div class="date-range-filter">
                      <input
                        type="date"
                        id="date-from"
                        onchange="applyFilters()"
                      />
                      <span>to</span>
                      <input
                        type="date"
                        id="date-to"
                        onchange="applyFilters()"
                      />
                    </div>
                  </div>
                  <div class="filter-group">
                    <button
                      type="button"
                      class="btn btn-outline btn-sm"
                      onclick="clearFilters()"
                    >
                      <i class="fas fa-times"></i> Clear Filters
                    </button>
                  </div>
                </div>
              </div>

              <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input
                  type="text"
                  class="search-input"
                  placeholder="Search rentals by number, service, or transaction ID..."
                  oninput="searchRentals(this.value)"
                />
              </div>
              <div class="table-container table-responsive-card">
                <table class="table">
                  <thead>
                    <tr>
                      <th>Service</th>
                      <th>MDN</th>
                      <th>Price</th>
                      <th>Purchased</th>
                      <th>Expires</th>
                      <th>Online Status</th>
                      <th>Online Window</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody id="rentals-table-body">
                    <tr>
                      <td data-label="No Data" colspan="8" class="table-empty">
                        <div class="lottie-container" style="text-align: center; padding: 20px;">
                          <lottie-player
                            src="/assets/animations/Loading search glass.json"
                            background="transparent"
                            speed="1"
                            style="width: 200px; height: 200px; margin: 0 auto;"
                            loop
                            autoplay>
                          </lottie-player>
                        </div>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </main>
      </div>
    </div>

    <div class="overlay" id="overlay"></div>

    <!-- JavaScript -->
    <!-- Add this script section at the bottom of the file, before the closing </body> tag -->
    <script>
      // Suppress noisy console logs and keep only our API traces
      (function() {
        const noop = function(){};
        console.log = noop;
        console.warn = noop;
        console.error = noop;
        console.debug = noop;
      })();

      async function apiCall(url, options = {}) {
        try {
          const method = options.method || 'GET';
          let bodyPreview = undefined;
          if (options.body) {
            try { bodyPreview = JSON.parse(options.body); } catch (_) { bodyPreview = options.body; }
          }
          console.info('[REQUEST]', method, url, bodyPreview);
          const res = await fetch(url, options);
          let data;
          try { data = await res.clone().json(); } catch (_) { data = await res.text(); }
          console.info('[RESPONSE]', res.status, url, data);
          if (!res.ok) throw new Error((data && data.message) || `HTTP ${res.status}`);
          return data;
        } catch (e) {
          console.info('[ERROR]', url, e?.message || e);
          throw e;
        }
      }
      // API Helper Functions
      // DOM Elements
      const sidebar = document.getElementById("sidebar");
      const sidebarToggle = document.getElementById("sidebarToggle");
      const mobileToggle = document.getElementById("mobileToggle");
      const overlay = document.getElementById("overlay");
      const userDropdown = document.getElementById("userDropdown");
      const dropdownMenu = document.getElementById("dropdownMenu");

      // Toggle Sidebar (Desktop)
      sidebarToggle.addEventListener("click", () => {
        sidebar.classList.toggle("sidebar-collapsed");
      });

      // Toggle Sidebar (Mobile)
      mobileToggle.addEventListener("click", () => {
        sidebar.classList.add("active");
        overlay.classList.add("active");
        document.body.style.overflow = "hidden";
      });

      // Close Sidebar on Overlay Click
      overlay.addEventListener("click", () => {
        sidebar.classList.remove("active");
        overlay.classList.remove("active");
        document.body.style.overflow = "";
      });

      // User Dropdown
      userDropdown.addEventListener("click", (e) => {
        e.stopPropagation();
        dropdownMenu.classList.toggle("active");
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", () => {
        dropdownMenu.classList.remove("active");
      });

      // Tab Functionality
      const tabs = document.querySelectorAll(".history-tab");
      const tabContents = document.querySelectorAll(".history-tab-content");

      tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          // Remove active class from all tabs
          tabs.forEach((t) => t.classList.remove("active"));

          // Add active class to clicked tab
          tab.classList.add("active");

          // Show corresponding tab content
          const tabId = tab.id;
          const contentId = tabId + "-content";

          tabContents.forEach((content) => {
            content.classList.remove("active");
            if (content.id === contentId) {
              content.classList.add("active");
            }
          });
        });
      });

      // Handle window resize
      window.addEventListener("resize", function () {
        if (window.innerWidth >= 992 && overlay.classList.contains("active")) {
          overlay.classList.remove("active");
          document.body.style.overflow = "";
        }

        // Close dropdown on resize
        dropdownMenu.classList.remove("active");
      });

      // Fix for iOS 100vh issue
      function setVH() {
        let vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty("--vh", `${vh}px`);
      }

      window.addEventListener("resize", setVH);
      setVH();
      // Function to refresh balance display
      function refreshBalance() {
        fetch("/user/api/profile-data")
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // Update all balance displays on the page
              const balanceElements = document.querySelectorAll(
                ".balance-amount, .menu-badge"
              );
              balanceElements.forEach((el) => {
                el.textContent = `$${(data.user?.balance || 0).toFixed(2)}`;
              });
            }
          })
          .catch((err) => console.error("Error refreshing balance:", err));
      }

      // Clean up intervals on page unload
      window.addEventListener('page-hidden', () => {
        if (window.intervalManager) {
          window.intervalManager.clearAll();
        }
      });
      
      window.addEventListener('beforeunload', function() {
        console.log("Page unloading, cleaning up intervals...");
        if (window.balanceRefreshInterval) {
          clearInterval(window.balanceRefreshInterval);
          window.balanceRefreshInterval = null;
        }
        if (window.rentalsRefreshInterval) {
          clearInterval(window.rentalsRefreshInterval);
          window.rentalsRefreshInterval = null;
        }
        if (activeWindowTimer) {
          clearInterval(activeWindowTimer);
          activeWindowTimer = null;
        }
      });

      // Pause intervals when page is not visible to reduce resource usage
      document.addEventListener("visibilitychange", function() {
        if (document.hidden) {
          console.log("Page hidden, pausing intervals...");
          if (window.balanceRefreshInterval) {
            clearInterval(window.balanceRefreshInterval);
            window.balanceRefreshInterval = null;
          }
          if (window.rentalsRefreshInterval) {
            clearInterval(window.rentalsRefreshInterval);
            window.rentalsRefreshInterval = null;
          }
          if (activeWindowTimer) {
            clearInterval(activeWindowTimer);
            activeWindowTimer = null;
          }
        } else {
          console.log("Page visible, resuming intervals...");
          // Resume intervals when page becomes visible
          if (!window.balanceRefreshInterval) {
            window.balanceRefreshInterval = setInterval(refreshBalance, 30000);
          }
          if (!window.rentalsRefreshInterval) {
            window.rentalsRefreshInterval = setInterval(loadRentals, 120000);
          }
          // Immediate refresh when page becomes visible
          refreshBalance();
          loadRentals();
        }
      });

      // Update the logout functionality to clear intervals
      function setupLogoutHandler() {
        const logoutButton = document.querySelector(".dropdown-item:last-child");
        if (logoutButton) {
          logoutButton.addEventListener("click", function (e) {
            e.preventDefault();
            // Clear any intervals before logging out
            if (window.balanceRefreshInterval) {
              clearInterval(window.balanceRefreshInterval);
              window.balanceRefreshInterval = null;
            }
            if (window.rentalsRefreshInterval) {
              clearInterval(window.rentalsRefreshInterval);
              window.rentalsRefreshInterval = null;
            }
            if (activeWindowTimer) {
              clearInterval(activeWindowTimer);
              activeWindowTimer = null;
            }
            window.location.href = "/user/signout";
          });
        }
      }

      function showAlert(message, type = "error") {
        // Remove existing alerts
        document.querySelectorAll(".api-alert").forEach((el) => el.remove());

        const alertDiv = document.createElement("div");
        alertDiv.className = `api-alert alert alert-${type}`;
        alertDiv.textContent = message;

        const content = document.querySelector(".content");
        content.insertBefore(alertDiv, content.firstChild);

        setTimeout(() => alertDiv.remove(), 5000);
      }

      // Map realtime status to badge class
      function getBadgeClassForRealtimeStatus(status) {
        const s = String(status || '').toLowerCase();
        if (s === 'online') return 'badge-success';
        if (s === 'activating' || s === 'pending' || s === 'processing') return 'badge-warning';
        if (s === 'cancelled' || s === 'rejected' || s === 'released') return 'badge-secondary';
        if (s === 'expired') return 'badge-warning';
        if (s === 'offline' || s === 'error' || s === 'failed' || s === 'unknown') return 'badge-danger';
        return 'badge-primary';
      }

      function formatRealtimeStatusForDisplay(status) {
        const s = String(status || '').toLowerCase();
        if (s === 'failed') return 'Rejected';
        if (s === 'cancelled' || s === 'released') return 'Released';
        if (s === 'rejected') return 'Rejected';
        if (s === 'expired') return 'Expired';
        if (s === 'online' || s === 'offline' || s === 'activating' || s === 'processing' || s === 'pending') return s;
        return '';
      }

      // Update the table row badge for realtime status
      function setRowRealtimeStatus(rentalId, ltrStatus) {
        try {
          const badge = document.getElementById(`status-badge-${rentalId}`);
          if (!badge) return;
          // Reset any existing badge-* class
          badge.classList.remove('badge-success', 'badge-warning', 'badge-danger', 'badge-primary');
          badge.classList.add(getBadgeClassForRealtimeStatus(ltrStatus));
          badge.textContent = formatRealtimeStatusForDisplay(ltrStatus);
          // Persist cache so refresh reflects backend states like rejected
          realtimeStatusById[rentalId] = (ltrStatus || '').toString().toLowerCase();
          saveRealtimeCache();
        } catch (_) {}
      }

      // DOM Elements
      const serviceSelect = document.getElementById("rental-service");
      const stateSelect = document.getElementById("rental-state");
      const rentalsTableBody = document.getElementById("rentalHistoryBody");

      // Global Variables
      let currentRentals = [];
      let filteredRentals = [];
      let selectedService = null;
      let isLoadingRentals = false;
      // Keep last-known realtime status per rental to persist across table refreshes
      const realtimeStatusById = {};
      // Active window timers (only one should run at a time)
      let activeWindowRentalId = null;
      let activeWindowTimer = null;
      let activeWindowRemaining = { till: 0, next: 0 };
      const realtimeCacheKey = 'rentalRealtimeStatus';
      try {
        const cached = JSON.parse(localStorage.getItem(realtimeCacheKey) || '{}');
        Object.assign(realtimeStatusById, cached);
      } catch (_) {}
      function saveRealtimeCache() {
        try { localStorage.setItem(realtimeCacheKey, JSON.stringify(realtimeStatusById)); } catch (_) {}
      }

      // Make dropdown functions globally accessible
      window.toggleDropdown = function (dropdownId) {
        console.log("Toggle dropdown called for:", dropdownId); // Debug log
        const dropdown = document.getElementById(dropdownId);
        if (!dropdown) {
          console.error("Dropdown not found:", dropdownId);
          return;
        }

        const menu = dropdown.querySelector(".dropdown-menu");
        const toggle = dropdown.querySelector(".dropdown-toggle");

        if (!menu || !toggle) {
          console.error("Menu or toggle not found in dropdown:", dropdownId);
          return;
        }

        console.log("Current menu classes:", menu.className); // Debug log

        // Close all other dropdowns first
        document.querySelectorAll(".dropdown-menu.show").forEach((el) => {
          if (el !== menu) {
            el.classList.remove("show");
            el.parentElement
              .querySelector(".dropdown-toggle")
              .classList.remove("active");
          }
        });

        // Toggle current dropdown
        menu.classList.toggle("show");
        toggle.classList.toggle("active");

        console.log("After toggle - menu classes:", menu.className); // Debug log

        // Clear search when opening
        if (menu.classList.contains("show")) {
          const searchInput = menu.querySelector("input");
          if (searchInput) {
            searchInput.value = "";
            window.filterServices(dropdownId, "");
          }
        }
      };

      window.filterServices = function (dropdownId, searchTerm) {
        const dropdown = document.getElementById(dropdownId);
        const options = dropdown.querySelectorAll(".option");

        options.forEach((option) => {
          const text = option
            .querySelector(".option-text")
            .textContent.toLowerCase();
          if (text.includes(searchTerm.toLowerCase())) {
            option.style.display = "flex";
          } else {
            option.style.display = "none";
          }
        });
      };

      window.selectRentalService = function (optionElement) {
        const dropdown = optionElement.closest(".searchable-dropdown");
        const selectedText = dropdown.querySelector(".selected-text");
        const hiddenInput = document.getElementById("rental-service");
        const toggle = dropdown.querySelector(".dropdown-toggle");
        const menu = dropdown.querySelector(".dropdown-menu");

        // Remove selected class from all options
        dropdown
          .querySelectorAll(".option")
          .forEach((opt) => opt.classList.remove("selected"));

        // Add selected class to clicked option
        optionElement.classList.add("selected");

        // Update display text and hidden input
        const serviceName = optionElement.dataset.name;
        const serviceValue = optionElement.dataset.value;
        const shortPrice = optionElement.dataset.ltrShortPrice;
        const fullPrice = optionElement.dataset.ltrPrice;

        selectedText.textContent = serviceName;
        hiddenInput.value = serviceValue;

        // Store prices as data attributes on the hidden input for easy access
        hiddenInput.setAttribute("data-short-price", shortPrice);
        hiddenInput.setAttribute("data-full-price", fullPrice);

        // Update price buttons
        document.getElementById("price-3days").textContent = `$${shortPrice}`;
        document.getElementById("price-30days").textContent = `$${fullPrice}`;

        // Close dropdown
        menu.classList.remove("show");
        toggle.classList.remove("active");

        console.log(
          "Selected service:",
          serviceName,
          "Value:",
          serviceValue,
          "Short Price:",
          shortPrice,
          "Full Price:",
          fullPrice
        );
      };

      // Function to create rental order
      window.createRentalOrder = function (duration) {
        const selectedServiceInput = document.getElementById("rental-service");
        const selectedState = document.getElementById("rental-state");

        console.log("Selected service input:", selectedServiceInput.value);
        console.log("Service data attributes:", {
          shortPrice: selectedServiceInput.getAttribute("data-short-price"),
          fullPrice: selectedServiceInput.getAttribute("data-full-price"),
        });

        if (!selectedServiceInput.value) {
          showAlert("Please select a service", "error");
          return;
        }

        const price =
          duration === "3days"
            ? selectedServiceInput.getAttribute("data-short-price")
            : selectedServiceInput.getAttribute("data-full-price");

        if (!price) {
          showAlert(
            "Price information not available. Please reselect the service.",
            "error"
          );
          return;
        }

        const serviceName = selectedServiceInput.value;
        const state = selectedState.value;

        console.log("Creating rental order with:", {
          service: serviceName,
          state: state,
          duration: duration,
          price: parseFloat(price),
        });

        showAlert("Creating rental order...", "info");

        // API call to create the rental order
        fetch("/user/api/rentals/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            service: serviceName,
            state: state,
            duration: duration,
            price: parseFloat(price),
          }),
        })
          .then((response) => {
            console.log("Response status:", response.status);
            return response.json();
          })
          .then((data) => {
            console.log("Response data:", data);
            if (data.success) {
              showAlert("Rental order created successfully!", "success");
              console.log(
                "Order created successfully, clearing form and refreshing data..."
              );
              // Clear the form
              selectedServiceInput.value = "";
              document.querySelector(".selected-text").textContent =
                "Select Service ...";
              document.getElementById("price-3days").textContent = "$0.00";
              document.getElementById("price-30days").textContent = "$0.00";
              // Refresh the rentals list and balance with a small delay to ensure backend is updated
              setTimeout(() => {
                console.log("Calling loadRentals after order creation...");
                loadRentals();
                refreshBalance();
              }, 1000);

              // Avoid duplicate refresh calls
            } else {
              showAlert(
                data.message || "Failed to create rental order",
                "error"
              );
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            showAlert("Failed to create rental order", "error");
          });
      };

      // Test functions removed

      // Function to force refresh rentals (for manual refresh button)
      function forceRefreshRentals() {
        console.log("Force refreshing rentals...");
        showAlert("Refreshing rentals...", "info");

        // Clear current data
        currentRentals = [];
        filteredRentals = [];

        // Load fresh data
        loadRentals();
      }

      // Function to load rentals
      function loadRentals() {
        if (isLoadingRentals) {
          console.log("Skipping loadRentals; already loading.");
          return;
        }
        isLoadingRentals = true;
        console.log("Loading rentals..."); // Debug log

        // Show loading state
        const tbody = document.getElementById("rentals-table-body");
        if (tbody) {
          tbody.innerHTML =
            '<tr><td data-label="Loading" colspan="8" class="table-empty"><div class="lottie-container" style="text-align: center; padding: 20px;"><lottie-player src="/assets/animations/Loading search glass.json" background="transparent" speed="1" style="width: 200px; height: 200px; margin: 0 auto;" loop autoplay></lottie-player></div></td></tr>';
        }

        console.log("🚀 Starting fetch request to /user/api/rentals"); // Debug log
        fetch("/user/api/rentals")
          .then((response) => {
            console.log("✅ Fetch response received"); // Debug log
            console.log("Response status:", response.status); // Debug log
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then((data) => {
            console.log("Raw API response:", JSON.stringify(data, null, 2)); // Debug log
            console.log("Rentals data received:", data); // Debug log
            console.log("Data structure:", {
              success: data.success,
              hasRentals: !!data.rentals,
              rentalsCount: data.rentals ? data.rentals.length : 0,
              rentalsArray: data.rentals,
            });

            if (data.success) {
              console.log(
                "Number of rentals:",
                data.rentals ? data.rentals.length : 0
              ); // Debug log
              currentRentals = data.rentals || [];
              filteredRentals = [...currentRentals];
              updateRentalsTable(filteredRentals);
              populateServiceFilter();

              if (currentRentals.length > 0) {
                showAlert(
                  `Loaded ${currentRentals.length} rental(s)`,
                  "success"
                );
              } else {
                console.log("No rentals found in successful response");
              }
            } else {
              console.log("API returned error:", data.message);
              currentRentals = [];
              filteredRentals = [];
              updateRentalsTable(filteredRentals);
              showAlert(data.message || "No rentals found", "info");
            }
          })
          .catch((error) => {
            console.error("Error loading rentals:", error);
            currentRentals = [];
            filteredRentals = [];
            updateRentalsTable(filteredRentals, true); // Pass error flag
            showAlert("Failed to load rentals", "error");
          })
          .finally(() => {
            isLoadingRentals = false;
          });
      }

      // Function to update rentals table
      function updateRentalsTable(rentals, isError = false) {
        console.log("Updating table with rentals:", rentals); // Debug log
        const tbody = document.getElementById("rentals-table-body");
        // Debug log

        if (!tbody) {
          console.error("Table body element not found!");
          return;
        }

        tbody.innerHTML = "";

        // Handle error state
        if (isError) {
          tbody.innerHTML =
            '<tr><td data-label="Error" colspan="8" class="table-empty"><div style="text-align: center; padding: 40px 20px;"><i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: var(--warning); margin-bottom: 1rem;"></i><div style="color: var(--gray-500); font-size: 1rem; margin-bottom: 0.5rem;">Failed to load rentals</div><div style="color: var(--gray-400); font-size: 0.875rem;">Please refresh the page or try again later</div><button onclick="loadRentals()" class="btn btn-outline" style="margin-top: 1rem;"><i class="fas fa-redo"></i> Retry</button></div></td></tr>';
          return;
        }

        if (!rentals || rentals.length === 0) {
          tbody.innerHTML =
            '<tr><td data-label="No Data" colspan="8" class="table-empty"><div style="text-align: center; padding: 40px 20px;"><i class="fas fa-phone-slash" style="font-size: 3rem; color: var(--gray-400); margin-bottom: 1rem;"></i><div style="color: var(--gray-500); font-size: 1rem; margin-bottom: 0.5rem;">No rental numbers found</div><div style="color: var(--gray-400); font-size: 0.875rem;">Start by renting your first number above</div></td></tr>';
          return;
        }

        console.log("Processing", rentals.length, "rentals"); // Debug log
        rentals.forEach((rental, index) => {
          console.log("Processing rental", index, ":", rental); // Debug log

          // Ensure rental object has required properties
          if (!rental) {
            console.warn("Rental object is null or undefined at index", index);
            return;
          }

          const row = document.createElement("tr");
          const durationBadge =
            rental.duration === "3days" ? "duration-3days" : "duration-30days";
          const rentalId = rental._id || rental.id;
          const initialRealtimeStatus = realtimeStatusById[rentalId] || null;
          const initialBadgeClass = getBadgeClassForRealtimeStatus(initialRealtimeStatus || 'unknown');

          // Calculate formatted dates
          const purchasedDate = rental.startDate ? new Date(rental.startDate).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }) : (rental.createdAt ? new Date(rental.createdAt).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }) : "N/A");

          const expiresDate = rental.expiresAt ? new Date(rental.expiresAt).toLocaleDateString('en-US', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }) : "N/A";

          row.innerHTML = `
            <td data-label="Service">${rental.service || "N/A"}</td>
            <td data-label="MDN">
              <div class="number-cell">
                <span class="phone-number">${rental.number || "Pending"}</span>
                ${
                  rental.number && rental.number !== "Pending"
                    ? `<button class="copy-btn" onclick="copyToClipboard('${rental.number}')" title="Copy number">
                  <i class="fas fa-copy"></i>
                </button>`
                    : ""
                }
              </div>
            </td>
            <td data-label="Price">$${(rental.price || 0).toFixed(2)}</td>
            <td data-label="Purchased">
              <span class="date-text">${purchasedDate}</span>
              <br>
              <small class="time-text">${rental.startDate ? new Date(rental.startDate).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              }) : (rental.createdAt ? new Date(rental.createdAt).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              }) : "")}</small>
            </td>
            <td data-label="Expires">
              <span class="date-text">${expiresDate}</span>
              <br>
              <small class="time-text">${rental.expiresAt ? new Date(rental.expiresAt).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
              }) : ""}</small>
            </td>
            <td data-label="Online Status">
              <span id="status-badge-${rentalId}" class="badge ${initialBadgeClass}">${
            formatRealtimeStatusForDisplay(initialRealtimeStatus || 'unknown')
          }</span>
            </td>
            <td data-label="Online Window">
              <span class="online-window" id="window-${rentalId}"></span>
            </td>
            <td data-label="Actions" class="actions-cell">
              <div class="action-buttons">
                <button class="action-btn" onclick="checkLtrStatus('${
                  rental._id || rental.id
                }')" title="Check Online Status">
                  <i class="fas fa-signal"></i>
                </button>
                <button class="action-btn" onclick="activateLtr('${
                  rental._id || rental.id
                }')" title="Activate Number">
                  <i class="fas fa-bolt"></i>
                </button>
                <button class="action-btn" onclick="checkRentalSMS('${
                  rental._id || rental.id
                }')" title="Check Messages">
                  <i class="fas fa-envelope-open-text"></i>
                </button>
                <button class="action-btn dislike-btn ${
                  rental.actions?.dislike ? "active" : ""
                }" 
                        onclick="toggleAction('${
                          rental._id || rental.id
                        }', 'dislike')" 
                        title="Toggle Dislike" data-action="dislike">
                  <i class="fas fa-thumbs-down"></i>
                </button>
                <button class="action-btn renew-btn" onclick="renewOrder('${
                  rental._id || rental.id
                }')" title="Renew Order" data-action="renew">
                  <i class="fas fa-redo"></i>
                </button>
                <button class="action-btn" onclick="releaseRental('${
                  rental._id || rental.id
                }')" title="Release Rental">
                  <i class="fas fa-times-circle"></i>
                </button>
              </div>
            </td>
          `;
          console.log("Appending row to table for rental:", rentalId); // Debug log
          tbody.appendChild(row);

          // Details row (hidden by default)
          const detailsRow = document.createElement('tr');
          detailsRow.className = 'details-row';
          detailsRow.id = `details-${rental._id || rental.id}`;
          detailsRow.innerHTML = `
            <td colspan="8" style="padding:0; border-top: none;">
              <div id="details-panel-${rental._id || rental.id}" class="details-panel" style="display:none"></div>
            </td>
          `;
          tbody.appendChild(detailsRow);
        });
        console.log("Finished updating table"); // Debug log
      }

      // Filter functions
      function applyFilters() {
        const statusFilter = document.getElementById("status-filter").value;
        const durationFilter = document.getElementById("duration-filter").value;
        const serviceFilter = document.getElementById("service-filter").value;
        const dateFrom = document.getElementById("date-from").value;
        const dateTo = document.getElementById("date-to").value;

        filteredRentals = currentRentals.filter((rental) => {
          // Status filter
          if (statusFilter && rental.status !== statusFilter) return false;

          // Duration filter
          if (durationFilter && rental.duration !== durationFilter)
            return false;

          // Service filter
          if (
            serviceFilter &&
            rental.service.toLowerCase() !== serviceFilter.toLowerCase()
          )
            return false;

          // Date range filter
          if (dateFrom) {
            const fromDate = new Date(dateFrom);
            if (new Date(rental.createdAt) < fromDate) return false;
          }

          if (dateTo) {
            const toDate = new Date(dateTo);
            toDate.setHours(23, 59, 59, 999);
            if (new Date(rental.createdAt) > toDate) return false;
          }

          return true;
        });

        updateRentalsTable(filteredRentals);
      }

      function clearFilters() {
        document.getElementById("status-filter").value = "";
        document.getElementById("duration-filter").value = "";
        document.getElementById("service-filter").value = "";
        document.getElementById("date-from").value = "";
        document.getElementById("date-to").value = "";

        filteredRentals = [...currentRentals];
        updateRentalsTable(filteredRentals);
      }

      function searchRentals(searchTerm) {
        if (!searchTerm.trim()) {
          updateRentalsTable(filteredRentals);
          return;
        }

        const searchResults = filteredRentals.filter((rental) => {
          const searchString = `${rental.number} ${rental.service} ${
            rental.transactionId || ""
          }`.toLowerCase();
          return searchString.includes(searchTerm.toLowerCase());
        });

        updateRentalsTable(searchResults);
      }

      function populateServiceFilter() {
        const serviceFilter = document.getElementById("service-filter");
        const services = [
          ...new Set(currentRentals.map((rental) => rental.service)),
        ];

        // Clear existing options except the first one
        serviceFilter.innerHTML = '<option value="">All Services</option>';

        services.forEach((service) => {
          const option = document.createElement("option");
          option.value = service;
          option.textContent = service;
          serviceFilter.appendChild(option);
        });
      }

      // Action functions
      async function checkLtrStatus(rentalId) {
        try {
          const data = await apiCall(`/user/api/rentals/${rentalId}/status`);
          if (!data.success) throw new Error(data.message || 'Failed');
          const msg = data.data || {};
          const status = msg.ltr_status || 'unknown';
          const till = typeof msg.till_change !== 'undefined' ? msg.till_change : 'N/A';
          const next = typeof msg.next_online !== 'undefined' ? msg.next_online : 'N/A';
          showAlert(`Status: ${status} | Active for: ${till}s | Next online: ${next}s`, status === 'online' ? 'success' : 'info');

          // Reflect realtime status in table and cache
          setRowRealtimeStatus(rentalId, status);

          // Show dynamic active window ONLY for this rental
          const t = Number(till) || 0;
          const n = Number(next) || 0;
          startActiveWindowTimer(rentalId, t, n);

          // Render status in details panel
          const panel = document.getElementById(`details-panel-${rentalId}`);
          const drow = document.getElementById(`details-${rentalId}`);
          if (panel && drow) {
            const rental = currentRentals.find(r => (r._id||r.id) === rentalId);
            const mdn = rental?.number || '';
            panel.style.display = 'block';
            drow.style.display = '';
            panel.innerHTML = `
              <div class="details-section">
                <div class="details-header">
                  <strong>Status</strong>
                  <span class="badge ${status==='online'?'badge-success':'badge-warning'}" style="margin-left:8px;">${status}</span>
                  <span style="margin-left:12px;color:#6b7280;">MDN: ${mdn}</span>
                </div>
                <div class="details-grid">
                  <div><span class="muted">Active window (till_change)</span><div class="kv">${till}s</div></div>
                  <div><span class="muted">Next online</span><div class="kv">${next}s</div></div>
                  <div><span class="muted">Server time</span><div class="kv">${msg.date_time||''}</div></div>
                </div>
              </div>
            `;
          }
        } catch (e) {
          showAlert(e.message || 'Status check failed', 'error');
        }
      }

      async function activateLtr(rentalId) {
        try {
          showAlert('Activating number...', 'info');
          const data = await apiCall(`/user/api/rentals/${rentalId}/activate`, { method: 'POST' });
          if (!data.success) throw new Error(data.message || 'Activation failed');
          const msg = data.data || {};
          const status = msg.ltr_status || 'unknown';
          const till = typeof msg.till_change !== 'undefined' ? msg.till_change : 'N/A';
          const next = typeof msg.next_online !== 'undefined' ? msg.next_online : 'N/A';
          showAlert(`Activated. Status: ${status} | Active for: ${till}s | Next online: ${next}s`, 'success');

          // Persist and reflect realtime status in table
          realtimeStatusById[rentalId] = status;
          saveRealtimeCache();
          setRowRealtimeStatus(rentalId, status);

          // Start dynamic window timer for this rental only
          const t = Number(till) || 0;
          const n = Number(next) || 0;
          startActiveWindowTimer(rentalId, t, n);
        } catch (e) {
          showAlert(e.message || 'Activation failed', 'error');
        }
      }

      async function checkRentalSMS(rentalId) {
        try {
          const data = await apiCall(`/user/api/rentals/${rentalId}/messages`);
          if (!data.success) throw new Error(data.message || 'Failed to fetch messages');
          const messages = data.messages || [];
          const panel = document.getElementById(`details-panel-${rentalId}`);
          const drow = document.getElementById(`details-${rentalId}`);
          if (!panel || !drow) return;

          const rental = currentRentals.find(r => (r._id||r.id) === rentalId);
          const mdn = rental?.number || '';

          let content = '';
          if (!messages.length) {
            content = `<div class="details-section"><div class="details-header"><strong>Messages</strong></div><div class="muted">No messages yet</div></div>`;
          } else {
            const last = messages[messages.length - 1];
            const text = last.reply || last.message || last.text || '';
            content = `
              <div class="details-section">
                <div class="details-header"><strong>All messages (${messages.length})</strong></div>
                <div class="messages-list">
                  ${messages.map(m => `
                    <div class="message-item">
                      <div class="message-meta">${m.date_time || ''} · From: ${m.from || ''}</div>
                      <div class="message-text">${(m.reply||m.message||m.text||'').replace(/</g,'&lt;').replace(/>/g,'&gt;')}</div>
                    </div>
                  `).join('')}
                </div>
              </div>
            `;
          }

          panel.innerHTML = content;
          panel.style.display = 'block';
          drow.style.display = '';
        } catch (e) {
          showAlert(e.message || 'Failed to check messages', 'error');
        }
      }
      function checkMessages(rentalId) {
        showAlert("Checking messages...", "info");

        fetch(`/user/api/rentals/${rentalId}/messages`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              if (data.messages && data.messages.length > 0) {
                showAlert(
                  `Found ${data.messages.length} message(s)`,
                  "success"
                );
                // You can implement a modal to show messages here
              } else {
                showAlert("No new messages found", "info");
              }
            } else {
              showAlert(data.message || "Failed to check messages", "error");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            showAlert("Failed to check messages", "error");
          });
      }

      function extendRental(rentalId) {
        if (confirm("Are you sure you want to extend this rental?")) {
          showAlert("Extending rental...", "info");

          fetch(`/user/api/rentals/${rentalId}/extend`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                showAlert("Rental extended successfully!", "success");
                loadRentals();
                refreshBalance();
              } else {
                showAlert(data.message || "Failed to extend rental", "error");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              showAlert("Failed to extend rental", "error");
            });
        }
      }

      function cancelRental(rentalId) {
        if (
          confirm(
            "Are you sure you want to cancel this rental? This action cannot be undone."
          )
        ) {
          showAlert("Cancelling rental...", "info");

          fetch(`/user/api/rentals/${rentalId}/cancel`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          })
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                showAlert("Rental cancelled successfully!", "success");
                loadRentals();
                refreshBalance();
              } else {
                showAlert(data.message || "Failed to cancel rental", "error");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              showAlert("Failed to cancel rental", "error");
            });
        }
      }

      function reorderRental(rentalId) {
        const rental = currentRentals.find((r) => r.id === rentalId);
        if (rental) {
          // Auto-fill the form with the rental details
          const serviceDropdown = document.getElementById(
            "rental-service-dropdown"
          );
          const selectedText = serviceDropdown.querySelector(".selected-text");
          const hiddenInput = document.getElementById("rental-service");
          const stateSelect = document.getElementById("rental-state");

          // Set the service
          selectedText.textContent = rental.service;
          hiddenInput.value = rental.service;

          // Set the state if available
          if (rental.state && stateSelect) {
            stateSelect.value = rental.state;
          }

          // Try to find the service option to get pricing
          const serviceOption = serviceDropdown.querySelector(
            `[data-value="${rental.service}"]`
          );
          if (serviceOption) {
            const shortPrice = serviceOption.dataset.ltrShortPrice;
            const fullPrice = serviceOption.dataset.ltrPrice;

            hiddenInput.setAttribute("data-short-price", shortPrice);
            hiddenInput.setAttribute("data-full-price", fullPrice);

            document.getElementById(
              "price-3days"
            ).textContent = `$${shortPrice}`;
            document.getElementById(
              "price-30days"
            ).textContent = `$${fullPrice}`;
          }

          showAlert(
            "Service and details pre-selected for reorder. Please choose duration and submit.",
            "info"
          );

          // Scroll to the order form
          document
            .querySelector(".card")
            .scrollIntoView({ behavior: "smooth" });
        }
      }

      function copyToClipboard(text) {
        navigator.clipboard
          .writeText(text)
          .then(() => {
            showAlert("Number copied to clipboard!", "success");
          })
          .catch(() => {
            const textarea = document.createElement("textarea");
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand("copy");
            document.body.removeChild(textarea);
            showAlert("Number copied to clipboard!", "success");
          });
      }

      // New action functions for the updated buttons
      async function toggleAction(rentalId, actionType) {
        try {
          const result = await fetch(`/user/api/rentals/${rentalId}/toggle-action`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ action: actionType }),
            }
          );

          const data = await result.json();

          if (data.success) {
            showAlert(`${actionType} toggled successfully!`, "success");

            // Update the button state
            const button = document.querySelector(
              `[onclick="toggleAction('${rentalId}', '${actionType}')"]`
            );
            if (button) {
              button.classList.toggle("active");
            }

            // Optionally reload rentals to ensure consistency
            loadRentals();
          } else {
            showAlert(
              data.message || `Failed to toggle ${actionType}`,
              "error"
            );
          }
        } catch (error) {
          console.error("Error toggling action:", error);
          showAlert(`Failed to toggle ${actionType}`, "error");
        }
      }

      async function renewOrder(rentalId) {
        if (!confirm("Are you sure you want to renew this rental? This will extend the rental period and charge your account.")) return;

        try {
          showAlert("Processing renewal...", "info");

          const result = await fetch(`/user/api/rentals/${rentalId}/renew`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const data = await result.json();

          if (data.success) {
            showAlert(data.message || "Rental renewed successfully!", "success");
            
            // Show extension details if available
            if (data.extensionDetails) {
              const { previousExpiry, newExpiry, daysExtended } = data.extensionDetails;
              const prevDate = new Date(previousExpiry).toLocaleDateString();
              const newDate = new Date(newExpiry).toLocaleDateString();
              
              setTimeout(() => {
                showAlert(`Extended by ${daysExtended} days: ${prevDate} → ${newDate}`, "info");
              }, 2000);
            }
            
            loadRentals();
            refreshBalance();
          } else {
            showAlert(data.message || "Failed to renew rental", "error");
          }
        } catch (error) {
          console.error("Error renewing rental:", error);
          showAlert("Failed to renew rental", "error");
        }
      }

      async function releaseRental(rentalId) {
        if (!confirm("Are you sure you want to release this rental? This cannot be undone and is allowed only before any SMS is received.")) return;
        try {
          showAlert("Releasing rental...", "info");
          const res = await fetch(`/user/api/rentals/${rentalId}/release`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const data = await res.json();
          if (data.success) {
            showAlert("Rental released successfully!", "success");
            // Stop any running short timer for this rental immediately
            if (activeWindowRentalId === rentalId && activeWindowTimer) {
              clearInterval(activeWindowTimer); 
              activeWindowTimer = null; 
              activeWindowRentalId = null;
            }
            const el = document.getElementById(`window-${rentalId}`);
            if (el) el.textContent = '';
            setRowRealtimeStatus(rentalId, 'rejected');
            loadRentals();
            refreshBalance();
          } else {
            showAlert(data.message || "Failed to release rental", "error");
          }
        } catch (e) {
          showAlert(e.message || "Failed to release rental", "error");
        }
      }

      // Close dropdown when clicking outside
      document.addEventListener("click", (event) => {
        const clickedElement = event.target;
        const isDropdownClick = clickedElement.closest(".searchable-dropdown");

        if (!isDropdownClick) {
          // Close all dropdowns
          document.querySelectorAll(".dropdown-menu.show").forEach((menu) => {
            menu.classList.remove("show");
            menu.parentElement
              .querySelector(".dropdown-toggle")
              .classList.remove("active");
          });
        }

        // Also close user dropdown
        if (!clickedElement.closest("#userDropdown")) {
          dropdownMenu.classList.remove("active");
        }
      });

      // Initialize on page load
      document.addEventListener("DOMContentLoaded", function () {
        console.log("Page loaded, initializing...");
        
        // Clear any existing intervals first (in case of reload)
        if (window.balanceRefreshInterval) {
          clearInterval(window.balanceRefreshInterval);
          window.balanceRefreshInterval = null;
        }
        if (window.rentalsRefreshInterval) {
          clearInterval(window.rentalsRefreshInterval);
          window.rentalsRefreshInterval = null;
        }
        
        refreshBalance();

        // Load rentals with a small delay to ensure DOM is fully ready
        setTimeout(() => {
          loadRentals();
        }, 500);

        loadServices(); // Load services dynamically
        setupLogoutHandler(); // Setup logout button handler

        // Add keyboard support for dropdowns
        document.addEventListener("keydown", function (e) {
          if (e.key === "Escape") {
            // Close all dropdowns on Escape key
            document.querySelectorAll(".dropdown-menu.show").forEach((menu) => {
              menu.classList.remove("show");
              menu.parentElement
                .querySelector(".dropdown-toggle")
                .classList.remove("active");
            });
          }
        });

        // Set up periodic balance refresh (every 30 seconds) - with safety check
        if (!window.balanceRefreshInterval) {
          window.balanceRefreshInterval = setInterval('balance-refresh', refreshBalance, 30000);
        }

        // Set up periodic rentals refresh (every 2 minutes) - with safety check
        if (!window.rentalsRefreshInterval) {
          window.rentalsRefreshInterval = setInterval('rentals-refresh', loadRentals, 120000);
        }

        // No long-term expiry countdown needed now; we show only the short online window

        // Active realtime window updater (only for the active rental)
        function renderActiveWindow() {
          if (!activeWindowRentalId) return;
          const el = document.getElementById(`window-${activeWindowRentalId}`);
          if (!el) return;
          const till = Math.max(0, activeWindowRemaining.till);
          const next = Math.max(0, activeWindowRemaining.next);
          const fmt = (sec) => {
            const s = Math.max(0, Math.floor(sec));
            const m = Math.floor(s / 60);
            const r = s % 60;
            return `${m.toString().padStart(2,'0')}:${r
              .toString()
              .padStart(2,'0')}`;
          };
          // Determine current status badge to decide label
          const badge = document.getElementById(`status-badge-${activeWindowRentalId}`);
          const statusText = (badge?.textContent || '').toLowerCase();
          if (till > 0 && statusText === 'online') {
            el.textContent = `Available for: ${fmt(till)}`;
          } else if (next > 0) {
            el.textContent = `Available in: ${fmt(next)}`;
          } else {
            el.textContent = '';
          }
        }

        window.startActiveWindowTimer = function (rentalId, tillSeconds, nextSeconds) {
          // Stop previous timer properly
          if (activeWindowTimer) { 
            clearInterval(activeWindowTimer); 
            activeWindowTimer = null; 
          }
          
          // Clear previous rental's window display
          if (activeWindowRentalId && activeWindowRentalId !== rentalId) {
            const prev = document.getElementById(`window-${activeWindowRentalId}`);
            if (prev) prev.textContent = '';
          }
          
          // Set new active rental
          activeWindowRentalId = rentalId;
          
          // Sync timing with server response timestamp to reduce drift
          const serverTime = Date.now();
          activeWindowRemaining = { 
            till: Math.max(0, tillSeconds), 
            next: Math.max(0, nextSeconds),
            startTime: serverTime
          };
          
          // Initial render
          renderActiveWindow();
          
          // Start new timer with better synchronization
          activeWindowTimer = setInterval(() => {
            // Calculate elapsed time since server response
            const elapsedMs = Date.now() - activeWindowRemaining.startTime;
            const elapsedSeconds = Math.floor(elapsedMs / 1000);
            
            // Calculate remaining time based on server values minus elapsed time
            const originalTill = Math.max(0, tillSeconds);
            const originalNext = Math.max(0, nextSeconds);
            
            activeWindowRemaining.till = Math.max(0, originalTill - elapsedSeconds);
            activeWindowRemaining.next = Math.max(0, originalNext - elapsedSeconds);
            
            renderActiveWindow();
            
            // Stop timer when both counters reach zero
            if (activeWindowRemaining.till === 0 && activeWindowRemaining.next === 0) {
              clearInterval(activeWindowTimer);
              activeWindowTimer = null;
              activeWindowRentalId = null;
            }
          }, 1000);
        }
      });

      // Load services from backend
      async function loadServices() {
        const serviceOptions = document.getElementById(
          "rental-service-options"
        );

        try {
          serviceOptions.innerHTML =
            '<div class="option"><div class="lottie-container" style="text-align: center; padding: 15px;"><lottie-player src="/assets/animations/Loading search glass.json" background="transparent" speed="1" style="width: 120px; height: 120px; margin: 0 auto;" loop autoplay></lottie-player></div></div>';

          const response = await fetch("/user/api/services");
          const data = await response.json();

          if (data.success && data.services && data.services.length > 0) {
            updateServiceOptions(data.services);
          } else {
            serviceOptions.innerHTML =
              '<div class="option"><span class="option-text">No services available</span></div>';
          }
        } catch (error) {
          console.error("Error loading services:", error);
          serviceOptions.innerHTML =
            '<div class="option"><span class="option-text">Failed to load services</span></div>';
        }
      }

      // Update service options
      function updateServiceOptions(services) {
        const serviceOptions = document.getElementById(
          "rental-service-options"
        );
        serviceOptions.innerHTML = "";

        services.forEach((service) => {
          const option = document.createElement("div");
          option.className = "option";
          option.dataset.value = service.name; // Use name as value
          option.dataset.name = service.name;
          option.dataset.ltrShortPrice =
            service.ltr_short_price || service.price;
          option.dataset.ltrPrice = service.ltr_price || service.price;
          option.onclick = () => selectRentalService(option);

          option.innerHTML = `
            <span class="option-text">${service.name}</span>
            <span class="option-price">$${
              service.ltr_short_price || service.price
            }</span>
          `;

          serviceOptions.appendChild(option);
        });
      }
    </script>
  </body>
</html>
